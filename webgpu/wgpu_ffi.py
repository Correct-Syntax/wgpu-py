"""
THIS CODE IS AUTOGENERATED - DO NOT EDIT
"""


import os
from os import path
from cffi import FFI

from .wgpu import BaseWGPU

os.environ["RUST_BACKTRACE"] = "0"

HERE = path.dirname(path.realpath(__file__))

ffi = FFI()

# read file
lines = []
with open(path.join(HERE, 'wgpu.h')) as f:
    for line in f.readlines():
        if not line.startswith(("#include ", "#define WGPU_LOCAL", "#define WGPUColor", "#define WGPUOrigin3d_ZERO", "#if defined", "#endif")):
            lines.append(line)


# configure cffi
ffi.cdef("".join(lines))
ffi.set_source("whatnameshouldiusehere", None)

_lib = ffi.dlopen(path.join(HERE, "wgpu_native-release.dll"))

def dict_to_struct(d, struct, refs):
    # return ffi.new(struct + " *", d)
    if d is None:
        return ffi.NULL
    is_flat = True
    for val in d.values():
        if isinstance(val, (tuple, list, dict, str)):
            is_flat = False
    if not is_flat:
        s = ffi.new(struct + " *")
        for key, sub_struct in _struct_info[struct]:
            val = d[key]
            if isinstance(val, (tuple, list)):
                assert sub_struct
                val2 = []
                if val and isinstance(val[0], dict):
                    for v in val:
                        val2.append(dict_to_struct(v, sub_struct, refs))
                    refs.extend(val2)
                    val = [v[0] for v in val2]
                    val = ffi.new(sub_struct + " []", val)
                else:
                    val = ffi.new(sub_struct + " []", val)
                refs.append(val)
            elif isinstance(val, dict):
                val = dict_to_struct(val, sub_struct, refs)
                refs.append(val)
                if "*" not in str(getattr(s, key)):
                    val = val[0]
            elif isinstance(val, str):
                val = ffi.new("char []", val.encode())
                refs.append(val)
            elif val is None:
                val = ffi.NULL
            setattr(s, key, val)
        return s
    else:
        return ffi.new(struct + " *", d)


_struct_info = dict(
    WGPUExtensions = [('anisotropic_filtering', 'bool_t'),  ],
    WGPULimits = [('max_bind_groups', 'uint32_t'),  ],
    WGPUDeviceDescriptor = [('extensions', 'WGPUExtensions'), ('limits', 'WGPULimits'),  ],
    WGPUComputePassDescriptor = [('todo', 'uint32_t'),  ],
    WGPUColor = [('r', 'double_t'), ('g', 'double_t'), ('b', 'double_t'), ('a', 'double_t'),  ],
    WGPURenderPassColorAttachmentDescriptor = [('attachment', 'uint64_t'), ('resolve_target', 'uint64_t'), ('load_op', 'int64_t'), ('store_op', 'int64_t'), ('clear_color', 'WGPUColor'),  ],
    WGPURenderPassDepthStencilAttachmentDescriptor_TextureViewId = [('attachment', 'uint64_t'), ('depth_load_op', 'int64_t'), ('depth_store_op', 'int64_t'), ('clear_depth', 'float_t'), ('stencil_load_op', 'int64_t'), ('stencil_store_op', 'int64_t'), ('clear_stencil', 'uint32_t'),  ],
    WGPURenderPassDescriptor = [('color_attachments', 'WGPURenderPassColorAttachmentDescriptor'), ('color_attachments_length', 'ctypes.POINTER(ctypes.c_uint64)'), ('depth_stencil_attachment', 'WGPURenderPassDepthStencilAttachmentDescriptor_TextureViewId'),  ],
    WGPUBufferCopyView = [('buffer', 'uint64_t'), ('offset', 'uint64_t'), ('row_pitch', 'uint32_t'), ('image_height', 'uint32_t'),  ],
    WGPUOrigin3d = [('x', 'float_t'), ('y', 'float_t'), ('z', 'float_t'),  ],
    WGPUTextureCopyView = [('texture', 'uint64_t'), ('mip_level', 'uint32_t'), ('array_layer', 'uint32_t'), ('origin', 'WGPUOrigin3d'),  ],
    WGPUExtent3d = [('width', 'uint32_t'), ('height', 'uint32_t'), ('depth', 'uint32_t'),  ],
    WGPUCommandBufferDescriptor = [('todo', 'uint32_t'),  ],
    WGPUBufferBinding = [('buffer', 'uint64_t'), ('offset', 'uint64_t'), ('size', 'uint64_t'),  ],
    WGPUBindingResource_WGPUBuffer_Body = [('_0', 'WGPUBufferBinding'),  ],
    WGPUBindingResource_WGPUSampler_Body = [('_0', 'uint64_t'),  ],
    WGPUBindingResource_WGPUTextureView_Body = [('_0', 'uint64_t'),  ],
    WGPUBindGroupBinding = [('binding', 'uint32_t'), ('resource', 'int64_t'),  ],
    WGPUBindGroupDescriptor = [('layout', 'uint64_t'), ('bindings', 'WGPUBindGroupBinding'), ('bindings_length', 'ctypes.POINTER(ctypes.c_uint64)'),  ],
    WGPUBindGroupLayoutBinding = [('binding', 'uint32_t'), ('visibility', 'uint32_t'), ('ty', 'int64_t'), ('texture_dimension', 'int64_t'), ('multisampled', 'bool_t'), ('dynamic', 'bool_t'),  ],
    WGPUBindGroupLayoutDescriptor = [('bindings', 'WGPUBindGroupLayoutBinding'), ('bindings_length', 'ctypes.POINTER(ctypes.c_uint64)'),  ],
    WGPUBufferDescriptor = [('size', 'uint64_t'), ('usage', 'uint32_t'),  ],
    WGPUCommandEncoderDescriptor = [('todo', 'uint32_t'),  ],
    WGPUProgrammableStageDescriptor = [('module', 'uint64_t'), ('entry_point', 'char_p_t'),  ],
    WGPUComputePipelineDescriptor = [('layout', 'uint64_t'), ('compute_stage', 'WGPUProgrammableStageDescriptor'),  ],
    WGPUPipelineLayoutDescriptor = [('bind_group_layouts', 'uint64_t'), ('bind_group_layouts_length', 'ctypes.POINTER(ctypes.c_uint64)'),  ],
    WGPURasterizationStateDescriptor = [('front_face', 'int64_t'), ('cull_mode', 'int64_t'), ('depth_bias', 'int32_t'), ('depth_bias_slope_scale', 'float_t'), ('depth_bias_clamp', 'float_t'),  ],
    WGPUBlendDescriptor = [('src_factor', 'int64_t'), ('dst_factor', 'int64_t'), ('operation', 'int64_t'),  ],
    WGPUColorStateDescriptor = [('format', 'int64_t'), ('alpha_blend', 'WGPUBlendDescriptor'), ('color_blend', 'WGPUBlendDescriptor'), ('write_mask', 'uint32_t'),  ],
    WGPUStencilStateFaceDescriptor = [('compare', 'int64_t'), ('fail_op', 'int64_t'), ('depth_fail_op', 'int64_t'), ('pass_op', 'int64_t'),  ],
    WGPUDepthStencilStateDescriptor = [('format', 'int64_t'), ('depth_write_enabled', 'bool_t'), ('depth_compare', 'int64_t'), ('stencil_front', 'WGPUStencilStateFaceDescriptor'), ('stencil_back', 'WGPUStencilStateFaceDescriptor'), ('stencil_read_mask', 'uint32_t'), ('stencil_write_mask', 'uint32_t'),  ],
    WGPUVertexAttributeDescriptor = [('offset', 'uint64_t'), ('format', 'int64_t'), ('shader_location', 'uint32_t'),  ],
    WGPUVertexBufferDescriptor = [('stride', 'uint64_t'), ('step_mode', 'int64_t'), ('attributes', 'WGPUVertexAttributeDescriptor'), ('attributes_length', 'ctypes.POINTER(ctypes.c_uint64)'),  ],
    WGPUVertexInputDescriptor = [('index_format', 'int64_t'), ('vertex_buffers', 'WGPUVertexBufferDescriptor'), ('vertex_buffers_length', 'ctypes.POINTER(ctypes.c_uint64)'),  ],
    WGPURenderPipelineDescriptor = [('layout', 'uint64_t'), ('vertex_stage', 'WGPUProgrammableStageDescriptor'), ('fragment_stage', 'WGPUProgrammableStageDescriptor'), ('primitive_topology', 'int64_t'), ('rasterization_state', 'WGPURasterizationStateDescriptor'), ('color_states', 'WGPUColorStateDescriptor'), ('color_states_length', 'ctypes.POINTER(ctypes.c_uint64)'), ('depth_stencil_state', 'WGPUDepthStencilStateDescriptor'), ('vertex_input', 'WGPUVertexInputDescriptor'), ('sample_count', 'uint32_t'), ('sample_mask', 'uint32_t'), ('alpha_to_coverage_enabled', 'bool_t'),  ],
    WGPUSamplerDescriptor = [('address_mode_u', 'int64_t'), ('address_mode_v', 'int64_t'), ('address_mode_w', 'int64_t'), ('mag_filter', 'int64_t'), ('min_filter', 'int64_t'), ('mipmap_filter', 'int64_t'), ('lod_min_clamp', 'float_t'), ('lod_max_clamp', 'float_t'), ('compare_function', 'int64_t'),  ],
    WGPUU32Array = [('bytes', 'uint32_t'), ('length', 'ctypes.POINTER(ctypes.c_uint64)'),  ],
    WGPUShaderModuleDescriptor = [('code', 'WGPUU32Array'),  ],
    WGPUSwapChainDescriptor = [('usage', 'uint32_t'), ('format', 'int64_t'), ('width', 'uint32_t'), ('height', 'uint32_t'), ('present_mode', 'int64_t'),  ],
    WGPUTextureDescriptor = [('size', 'WGPUExtent3d'), ('array_layer_count', 'uint32_t'), ('mip_level_count', 'uint32_t'), ('sample_count', 'uint32_t'), ('dimension', 'int64_t'), ('format', 'int64_t'), ('usage', 'uint32_t'),  ],
    WGPURequestAdapterOptions = [('power_preference', 'int64_t'), ('backends', 'uint32_t'),  ],
    WGPUSwapChainOutput = [('view_id', 'uint64_t'),  ],
    WGPUTextureViewDescriptor = [('format', 'int64_t'), ('dimension', 'int64_t'), ('aspect', 'int64_t'), ('base_mip_level', 'uint32_t'), ('level_count', 'uint32_t'), ('base_array_layer', 'uint32_t'), ('array_layer_count', 'uint32_t'),  ],
)


class RsWGPU(BaseWGPU):
    """ WebGPU API implemented using the C-API dll of wgpu-rs, via cffi.
    """

    def adapter_request_device(self, adapter_id: int, desc: 'DeviceDescriptor'):
        """
        WGPUDeviceId wgpu_adapter_request_device(WGPUAdapterId adapter_id,
                                                 const WGPUDeviceDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUDeviceDescriptor', xx)
        return _lib.wgpu_adapter_request_device(adapter_id, desc)

    def bind_group_destroy(self, bind_group_id: int):
        """
        void wgpu_bind_group_destroy(WGPUBindGroupId bind_group_id);
        """
        xx = []
        return _lib.wgpu_bind_group_destroy(bind_group_id)

    def buffer_destroy(self, buffer_id: int):
        """
        void wgpu_buffer_destroy(WGPUBufferId buffer_id);
        """
        xx = []
        return _lib.wgpu_buffer_destroy(buffer_id)

    def buffer_map_read_async(self, buffer_id: int, start: int, size: int, callback: 'BufferMapReadCallback', userdata: 'uint8'):
        """
        void wgpu_buffer_map_read_async(WGPUBufferId buffer_id,
                                        WGPUBufferAddress start,
                                        WGPUBufferAddress size,
                                        WGPUBufferMapReadCallback callback,
                                        uint8_t *userdata);
        """
        xx = []
        return _lib.wgpu_buffer_map_read_async(buffer_id, start, size, callback, userdata)

    def buffer_map_write_async(self, buffer_id: int, start: int, size: int, callback: 'BufferMapWriteCallback', userdata: 'uint8'):
        """
        void wgpu_buffer_map_write_async(WGPUBufferId buffer_id,
                                         WGPUBufferAddress start,
                                         WGPUBufferAddress size,
                                         WGPUBufferMapWriteCallback callback,
                                         uint8_t *userdata);
        """
        xx = []
        return _lib.wgpu_buffer_map_write_async(buffer_id, start, size, callback, userdata)

    def buffer_unmap(self, buffer_id: int):
        """
        void wgpu_buffer_unmap(WGPUBufferId buffer_id);
        """
        xx = []
        return _lib.wgpu_buffer_unmap(buffer_id)

    def command_encoder_begin_compute_pass(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'ComputePassDescriptor'):
        """
        WGPUComputePassId wgpu_command_encoder_begin_compute_pass(WGPUCommandEncoderId encoder_id,
                                                                  const WGPUComputePassDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUComputePassDescriptor', xx)
        return _lib.wgpu_command_encoder_begin_compute_pass(encoder_id, desc)

    def command_encoder_begin_render_pass(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'RenderPassDescriptor'):
        """
        WGPURenderPassId wgpu_command_encoder_begin_render_pass(WGPUCommandEncoderId encoder_id,
                                                                const WGPURenderPassDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPURenderPassDescriptor', xx)
        return _lib.wgpu_command_encoder_begin_render_pass(encoder_id, desc)

    def command_encoder_copy_buffer_to_buffer(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: int, source_offset: int, destination: int, destination_offset: int, size: int):
        """
        void wgpu_command_encoder_copy_buffer_to_buffer(WGPUCommandEncoderId command_encoder_id,
                                                        WGPUBufferId source,
                                                        WGPUBufferAddress source_offset,
                                                        WGPUBufferId destination,
                                                        WGPUBufferAddress destination_offset,
                                                        WGPUBufferAddress size);
        """
        xx = []
        return _lib.wgpu_command_encoder_copy_buffer_to_buffer(command_encoder_id, source, source_offset, destination, destination_offset, size)

    def command_encoder_copy_buffer_to_texture(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'BufferCopyView', destination: 'TextureCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_buffer_to_texture(WGPUCommandEncoderId command_encoder_id,
                                                         const WGPUBufferCopyView *source,
                                                         const WGPUTextureCopyView *destination,
                                                         WGPUExtent3d copy_size);
        """
        xx = []
        source = dict_to_struct(source, 'WGPUBufferCopyView', xx)
        destination = dict_to_struct(destination, 'WGPUTextureCopyView', xx)
        copy_size = dict_to_struct(copy_size, 'WGPUExtent3d', xx)
        return _lib.wgpu_command_encoder_copy_buffer_to_texture(command_encoder_id, source, destination, copy_size)

    def command_encoder_copy_texture_to_buffer(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'TextureCopyView', destination: 'BufferCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_texture_to_buffer(WGPUCommandEncoderId command_encoder_id,
                                                         const WGPUTextureCopyView *source,
                                                         const WGPUBufferCopyView *destination,
                                                         WGPUExtent3d copy_size);
        """
        xx = []
        source = dict_to_struct(source, 'WGPUTextureCopyView', xx)
        destination = dict_to_struct(destination, 'WGPUBufferCopyView', xx)
        copy_size = dict_to_struct(copy_size, 'WGPUExtent3d', xx)
        return _lib.wgpu_command_encoder_copy_texture_to_buffer(command_encoder_id, source, destination, copy_size)

    def command_encoder_copy_texture_to_texture(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'TextureCopyView', destination: 'TextureCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_texture_to_texture(WGPUCommandEncoderId command_encoder_id,
                                                          const WGPUTextureCopyView *source,
                                                          const WGPUTextureCopyView *destination,
                                                          WGPUExtent3d copy_size);
        """
        xx = []
        source = dict_to_struct(source, 'WGPUTextureCopyView', xx)
        destination = dict_to_struct(destination, 'WGPUTextureCopyView', xx)
        copy_size = dict_to_struct(copy_size, 'WGPUExtent3d', xx)
        return _lib.wgpu_command_encoder_copy_texture_to_texture(command_encoder_id, source, destination, copy_size)

    def command_encoder_finish(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'CommandBufferDescriptor'):
        """
        WGPUCommandBufferId wgpu_command_encoder_finish(WGPUCommandEncoderId encoder_id,
                                                        const WGPUCommandBufferDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUCommandBufferDescriptor', xx)
        return _lib.wgpu_command_encoder_finish(encoder_id, desc)

    def compute_pass_dispatch(self, pass_id: int, x: int, y: int, z: int):
        """
        void wgpu_compute_pass_dispatch(WGPUComputePassId pass_id, uint32_t x, uint32_t y, uint32_t z);
        """
        xx = []
        return _lib.wgpu_compute_pass_dispatch(pass_id, x, y, z)

    def compute_pass_dispatch_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_compute_pass_dispatch_indirect(WGPUComputePassId pass_id,
                                                 WGPUBufferId indirect_buffer_id,
                                                 WGPUBufferAddress indirect_offset);
        """
        xx = []
        return _lib.wgpu_compute_pass_dispatch_indirect(pass_id, indirect_buffer_id, indirect_offset)

    def compute_pass_end_pass(self, pass_id: int):
        """
        void wgpu_compute_pass_end_pass(WGPUComputePassId pass_id);
        """
        xx = []
        return _lib.wgpu_compute_pass_end_pass(pass_id)

    def compute_pass_insert_debug_marker(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_compute_pass_insert_debug_marker(WGPUComputePassId _pass_id, WGPURawString _label);
        """
        xx = []
        return _lib.wgpu_compute_pass_insert_debug_marker(_pass_id, _label)

    def compute_pass_pop_debug_group(self, _pass_id: int):
        """
        void wgpu_compute_pass_pop_debug_group(WGPUComputePassId _pass_id);
        """
        xx = []
        return _lib.wgpu_compute_pass_pop_debug_group(_pass_id)

    def compute_pass_push_debug_group(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_compute_pass_push_debug_group(WGPUComputePassId _pass_id, WGPURawString _label);
        """
        xx = []
        return _lib.wgpu_compute_pass_push_debug_group(_pass_id, _label)

    def compute_pass_set_bind_group(self, pass_id: int, index: int, bind_group_id: int, offsets: int, offsets_length: 'uintptr'):
        """
        void wgpu_compute_pass_set_bind_group(WGPUComputePassId pass_id,
                                              uint32_t index,
                                              WGPUBindGroupId bind_group_id,
                                              const WGPUBufferAddress *offsets,
                                              uintptr_t offsets_length);
        """
        xx = []
        return _lib.wgpu_compute_pass_set_bind_group(pass_id, index, bind_group_id, offsets, offsets_length)

    def compute_pass_set_pipeline(self, pass_id: int, pipeline_id: int):
        """
        void wgpu_compute_pass_set_pipeline(WGPUComputePassId pass_id, WGPUComputePipelineId pipeline_id);
        """
        xx = []
        return _lib.wgpu_compute_pass_set_pipeline(pass_id, pipeline_id)

    def create_surface_from_metal_layer(self, layer):
        """
        WGPUSurfaceId wgpu_create_surface_from_metal_layer(void *layer);
        """
        xx = []
        return _lib.wgpu_create_surface_from_metal_layer(layer)

    def create_surface_from_windows_hwnd(self, _hinstance, hwnd):
        """
        WGPUSurfaceId wgpu_create_surface_from_windows_hwnd(void *_hinstance, void *hwnd);
        """
        xx = []
        return _lib.wgpu_create_surface_from_windows_hwnd(_hinstance, hwnd)

    def create_surface_from_xlib(self, display, window: int):
        """
        WGPUSurfaceId wgpu_create_surface_from_xlib(const void **display, uint64_t window);
        """
        xx = []
        return _lib.wgpu_create_surface_from_xlib(display, window)

    def device_create_bind_group(self, device_id: int, desc: 'BindGroupDescriptor'):
        """
        WGPUBindGroupId wgpu_device_create_bind_group(WGPUDeviceId device_id,
                                                      const WGPUBindGroupDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUBindGroupDescriptor', xx)
        return _lib.wgpu_device_create_bind_group(device_id, desc)

    def device_create_bind_group_layout(self, device_id: int, desc: 'BindGroupLayoutDescriptor'):
        """
        WGPUBindGroupLayoutId wgpu_device_create_bind_group_layout(WGPUDeviceId device_id,
                                                                   const WGPUBindGroupLayoutDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUBindGroupLayoutDescriptor', xx)
        return _lib.wgpu_device_create_bind_group_layout(device_id, desc)

    def device_create_buffer(self, device_id: int, desc: 'BufferDescriptor'):
        """
        WGPUBufferId wgpu_device_create_buffer(WGPUDeviceId device_id, const WGPUBufferDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUBufferDescriptor', xx)
        return _lib.wgpu_device_create_buffer(device_id, desc)

    def device_create_buffer_mapped(self, device_id: int, desc: 'BufferDescriptor', mapped_ptr_out: 'uint8'):
        """
        WGPUBufferId wgpu_device_create_buffer_mapped(WGPUDeviceId device_id,
                                                      const WGPUBufferDescriptor *desc,
                                                      uint8_t **mapped_ptr_out);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUBufferDescriptor', xx)
        return _lib.wgpu_device_create_buffer_mapped(device_id, desc, mapped_ptr_out)

    def device_create_command_encoder(self, device_id: int, desc: 'CommandEncoderDescriptor'):
        """
        WGPUCommandEncoderId wgpu_device_create_command_encoder(WGPUDeviceId device_id,
                                                                const WGPUCommandEncoderDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUCommandEncoderDescriptor', xx)
        return _lib.wgpu_device_create_command_encoder(device_id, desc)

    def device_create_compute_pipeline(self, device_id: int, desc: 'ComputePipelineDescriptor'):
        """
        WGPUComputePipelineId wgpu_device_create_compute_pipeline(WGPUDeviceId device_id,
                                                                  const WGPUComputePipelineDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUComputePipelineDescriptor', xx)
        return _lib.wgpu_device_create_compute_pipeline(device_id, desc)

    def device_create_pipeline_layout(self, device_id: int, desc: 'PipelineLayoutDescriptor'):
        """
        WGPUPipelineLayoutId wgpu_device_create_pipeline_layout(WGPUDeviceId device_id,
                                                                const WGPUPipelineLayoutDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUPipelineLayoutDescriptor', xx)
        return _lib.wgpu_device_create_pipeline_layout(device_id, desc)

    def device_create_render_pipeline(self, device_id: int, desc: 'RenderPipelineDescriptor'):
        """
        WGPURenderPipelineId wgpu_device_create_render_pipeline(WGPUDeviceId device_id,
                                                                const WGPURenderPipelineDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPURenderPipelineDescriptor', xx)
        return _lib.wgpu_device_create_render_pipeline(device_id, desc)

    def device_create_sampler(self, device_id: int, desc: 'SamplerDescriptor'):
        """
        WGPUSamplerId wgpu_device_create_sampler(WGPUDeviceId device_id, const WGPUSamplerDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUSamplerDescriptor', xx)
        return _lib.wgpu_device_create_sampler(device_id, desc)

    def device_create_shader_module(self, device_id: int, desc: 'ShaderModuleDescriptor'):
        """
        WGPUShaderModuleId wgpu_device_create_shader_module(WGPUDeviceId device_id,
                                                            const WGPUShaderModuleDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUShaderModuleDescriptor', xx)
        return _lib.wgpu_device_create_shader_module(device_id, desc)

    def device_create_swap_chain(self, device_id: int, surface_id: int, desc: 'SwapChainDescriptor'):
        """
        WGPUSwapChainId wgpu_device_create_swap_chain(WGPUDeviceId device_id,
                                                      WGPUSurfaceId surface_id,
                                                      const WGPUSwapChainDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUSwapChainDescriptor', xx)
        return _lib.wgpu_device_create_swap_chain(device_id, surface_id, desc)

    def device_create_texture(self, device_id: int, desc: 'TextureDescriptor'):
        """
        WGPUTextureId wgpu_device_create_texture(WGPUDeviceId device_id, const WGPUTextureDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUTextureDescriptor', xx)
        return _lib.wgpu_device_create_texture(device_id, desc)

    def device_destroy(self, device_id: int):
        """
        void wgpu_device_destroy(WGPUDeviceId device_id);
        """
        xx = []
        return _lib.wgpu_device_destroy(device_id)

    def device_get_limits(self, _device_id: int, limits: 'Limits'):
        """
        void wgpu_device_get_limits(WGPUDeviceId _device_id, WGPULimits *limits);
        """
        xx = []
        limits = dict_to_struct(limits, 'WGPULimits', xx)
        return _lib.wgpu_device_get_limits(_device_id, limits)

    def device_get_queue(self, device_id: int):
        """
        WGPUQueueId wgpu_device_get_queue(WGPUDeviceId device_id);
        """
        xx = []
        return _lib.wgpu_device_get_queue(device_id)

    def device_poll(self, device_id: int, force_wait: 'bool'):
        """
        void wgpu_device_poll(WGPUDeviceId device_id, bool force_wait);
        """
        xx = []
        return _lib.wgpu_device_poll(device_id, force_wait)

    def queue_submit(self, queue_id: 'Id_Device_Dummy', command_buffers: int, command_buffers_length: 'uintptr'):
        """
        void wgpu_queue_submit(WGPUQueueId queue_id,
                               const WGPUCommandBufferId *command_buffers,
                               uintptr_t command_buffers_length);
        """
        xx = []
        return _lib.wgpu_queue_submit(queue_id, command_buffers, command_buffers_length)

    def render_pass_draw(self, pass_id: int, vertex_count: int, instance_count: int, first_vertex: int, first_instance: int):
        """
        void wgpu_render_pass_draw(WGPURenderPassId pass_id,
                                   uint32_t vertex_count,
                                   uint32_t instance_count,
                                   uint32_t first_vertex,
                                   uint32_t first_instance);
        """
        xx = []
        return _lib.wgpu_render_pass_draw(pass_id, vertex_count, instance_count, first_vertex, first_instance)

    def render_pass_draw_indexed(self, pass_id: int, index_count: int, instance_count: int, first_index: int, base_vertex: int, first_instance: int):
        """
        void wgpu_render_pass_draw_indexed(WGPURenderPassId pass_id,
                                           uint32_t index_count,
                                           uint32_t instance_count,
                                           uint32_t first_index,
                                           int32_t base_vertex,
                                           uint32_t first_instance);
        """
        xx = []
        return _lib.wgpu_render_pass_draw_indexed(pass_id, index_count, instance_count, first_index, base_vertex, first_instance)

    def render_pass_draw_indexed_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_render_pass_draw_indexed_indirect(WGPURenderPassId pass_id,
                                                    WGPUBufferId indirect_buffer_id,
                                                    WGPUBufferAddress indirect_offset);
        """
        xx = []
        return _lib.wgpu_render_pass_draw_indexed_indirect(pass_id, indirect_buffer_id, indirect_offset)

    def render_pass_draw_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_render_pass_draw_indirect(WGPURenderPassId pass_id,
                                            WGPUBufferId indirect_buffer_id,
                                            WGPUBufferAddress indirect_offset);
        """
        xx = []
        return _lib.wgpu_render_pass_draw_indirect(pass_id, indirect_buffer_id, indirect_offset)

    def render_pass_end_pass(self, pass_id: int):
        """
        void wgpu_render_pass_end_pass(WGPURenderPassId pass_id);
        """
        xx = []
        return _lib.wgpu_render_pass_end_pass(pass_id)

    def render_pass_execute_bundles(self, _pass_id: int, _bundles: int, _bundles_length: 'uintptr'):
        """
        void wgpu_render_pass_execute_bundles(WGPURenderPassId _pass_id,
                                              const WGPURenderBundleId *_bundles,
                                              uintptr_t _bundles_length);
        """
        xx = []
        return _lib.wgpu_render_pass_execute_bundles(_pass_id, _bundles, _bundles_length)

    def render_pass_insert_debug_marker(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_render_pass_insert_debug_marker(WGPURenderPassId _pass_id, WGPURawString _label);
        """
        xx = []
        return _lib.wgpu_render_pass_insert_debug_marker(_pass_id, _label)

    def render_pass_pop_debug_group(self, _pass_id: int):
        """
        void wgpu_render_pass_pop_debug_group(WGPURenderPassId _pass_id);
        """
        xx = []
        return _lib.wgpu_render_pass_pop_debug_group(_pass_id)

    def render_pass_push_debug_group(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_render_pass_push_debug_group(WGPURenderPassId _pass_id, WGPURawString _label);
        """
        xx = []
        return _lib.wgpu_render_pass_push_debug_group(_pass_id, _label)

    def render_pass_set_bind_group(self, pass_id: int, index: int, bind_group_id: int, offsets: int, offsets_length: 'uintptr'):
        """
        void wgpu_render_pass_set_bind_group(WGPURenderPassId pass_id,
                                             uint32_t index,
                                             WGPUBindGroupId bind_group_id,
                                             const WGPUBufferAddress *offsets,
                                             uintptr_t offsets_length);
        """
        xx = []
        return _lib.wgpu_render_pass_set_bind_group(pass_id, index, bind_group_id, offsets, offsets_length)

    def render_pass_set_blend_color(self, pass_id: int, color: 'Color'):
        """
        void wgpu_render_pass_set_blend_color(WGPURenderPassId pass_id, const WGPUColor *color);
        """
        xx = []
        color = dict_to_struct(color, 'WGPUColor', xx)
        return _lib.wgpu_render_pass_set_blend_color(pass_id, color)

    def render_pass_set_index_buffer(self, pass_id: int, buffer_id: int, offset: int):
        """
        void wgpu_render_pass_set_index_buffer(WGPURenderPassId pass_id,
                                               WGPUBufferId buffer_id,
                                               WGPUBufferAddress offset);
        """
        xx = []
        return _lib.wgpu_render_pass_set_index_buffer(pass_id, buffer_id, offset)

    def render_pass_set_pipeline(self, pass_id: int, pipeline_id: int):
        """
        void wgpu_render_pass_set_pipeline(WGPURenderPassId pass_id, WGPURenderPipelineId pipeline_id);
        """
        xx = []
        return _lib.wgpu_render_pass_set_pipeline(pass_id, pipeline_id)

    def render_pass_set_scissor_rect(self, pass_id: int, x: int, y: int, w: int, h: int):
        """
        void wgpu_render_pass_set_scissor_rect(WGPURenderPassId pass_id,
                                               uint32_t x,
                                               uint32_t y,
                                               uint32_t w,
                                               uint32_t h);
        """
        xx = []
        return _lib.wgpu_render_pass_set_scissor_rect(pass_id, x, y, w, h)

    def render_pass_set_stencil_reference(self, pass_id: int, value: int):
        """
        void wgpu_render_pass_set_stencil_reference(WGPURenderPassId pass_id, uint32_t value);
        """
        xx = []
        return _lib.wgpu_render_pass_set_stencil_reference(pass_id, value)

    def render_pass_set_vertex_buffers(self, pass_id: int, start_slot: int, buffers: int, offsets: int, length: 'uintptr'):
        """
        void wgpu_render_pass_set_vertex_buffers(WGPURenderPassId pass_id,
                                                 uint32_t start_slot,
                                                 const WGPUBufferId *buffers,
                                                 const WGPUBufferAddress *offsets,
                                                 uintptr_t length);
        """
        xx = []
        return _lib.wgpu_render_pass_set_vertex_buffers(pass_id, start_slot, buffers, offsets, length)

    def render_pass_set_viewport(self, pass_id: int, x: float, y: float, w: float, h: float, min_depth: float, max_depth: float):
        """
        void wgpu_render_pass_set_viewport(WGPURenderPassId pass_id,
                                           float x,
                                           float y,
                                           float w,
                                           float h,
                                           float min_depth,
                                           float max_depth);
        """
        xx = []
        return _lib.wgpu_render_pass_set_viewport(pass_id, x, y, w, h, min_depth, max_depth)

    def request_adapter(self, desc: 'RequestAdapterOptions'):
        """
        WGPUAdapterId wgpu_request_adapter(const WGPURequestAdapterOptions *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPURequestAdapterOptions', xx)
        return _lib.wgpu_request_adapter(desc)

    def sampler_destroy(self, sampler_id: int):
        """
        void wgpu_sampler_destroy(WGPUSamplerId sampler_id);
        """
        xx = []
        return _lib.wgpu_sampler_destroy(sampler_id)

    def swap_chain_get_next_texture(self, swap_chain_id: int):
        """
        WGPUSwapChainOutput wgpu_swap_chain_get_next_texture(WGPUSwapChainId swap_chain_id);
        """
        xx = []
        return _lib.wgpu_swap_chain_get_next_texture(swap_chain_id)

    def swap_chain_present(self, swap_chain_id: int):
        """
        void wgpu_swap_chain_present(WGPUSwapChainId swap_chain_id);
        """
        xx = []
        return _lib.wgpu_swap_chain_present(swap_chain_id)

    def texture_create_view(self, texture_id: int, desc: 'TextureViewDescriptor'):
        """
        WGPUTextureViewId wgpu_texture_create_view(WGPUTextureId texture_id,
                                                   const WGPUTextureViewDescriptor *desc);
        """
        xx = []
        desc = dict_to_struct(desc, 'WGPUTextureViewDescriptor', xx)
        return _lib.wgpu_texture_create_view(texture_id, desc)

    def texture_destroy(self, texture_id: int):
        """
        void wgpu_texture_destroy(WGPUTextureId texture_id);
        """
        xx = []
        return _lib.wgpu_texture_destroy(texture_id)

    def texture_view_destroy(self, texture_view_id: int):
        """
        void wgpu_texture_view_destroy(WGPUTextureViewId texture_view_id);
        """
        xx = []
        return _lib.wgpu_texture_view_destroy(texture_view_id)
