"""
THIS CODE IS AUTOGENERATED - DO NOT EDIT
"""


class BaseWGPU:
    """ Abstract base class for the WebGPU API.
    """

    # %% Functions (65)

    def adapter_request_device(self, adapter_id: int, desc: 'DeviceDescriptor'):
        """
        WGPUDeviceId wgpu_adapter_request_device(WGPUAdapterId adapter_id,
                                                 const WGPUDeviceDescriptor *desc);
        """
        raise NotImplementedError()

    def bind_group_destroy(self, bind_group_id: int):
        """
        void wgpu_bind_group_destroy(WGPUBindGroupId bind_group_id);
        """
        raise NotImplementedError()

    def buffer_destroy(self, buffer_id: int):
        """
        void wgpu_buffer_destroy(WGPUBufferId buffer_id);
        """
        raise NotImplementedError()

    def buffer_map_read_async(self, buffer_id: int, start: int, size: int, callback: 'BufferMapReadCallback', userdata: 'uint8'):
        """
        void wgpu_buffer_map_read_async(WGPUBufferId buffer_id,
                                        WGPUBufferAddress start,
                                        WGPUBufferAddress size,
                                        WGPUBufferMapReadCallback callback,
                                        uint8_t *userdata);
        """
        raise NotImplementedError()

    def buffer_map_write_async(self, buffer_id: int, start: int, size: int, callback: 'BufferMapWriteCallback', userdata: 'uint8'):
        """
        void wgpu_buffer_map_write_async(WGPUBufferId buffer_id,
                                         WGPUBufferAddress start,
                                         WGPUBufferAddress size,
                                         WGPUBufferMapWriteCallback callback,
                                         uint8_t *userdata);
        """
        raise NotImplementedError()

    def buffer_unmap(self, buffer_id: int):
        """
        void wgpu_buffer_unmap(WGPUBufferId buffer_id);
        """
        raise NotImplementedError()

    def command_encoder_begin_compute_pass(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'ComputePassDescriptor'):
        """
        WGPUComputePassId wgpu_command_encoder_begin_compute_pass(WGPUCommandEncoderId encoder_id,
                                                                  const WGPUComputePassDescriptor *desc);
        """
        raise NotImplementedError()

    def command_encoder_begin_render_pass(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'RenderPassDescriptor'):
        """
        WGPURenderPassId wgpu_command_encoder_begin_render_pass(WGPUCommandEncoderId encoder_id,
                                                                const WGPURenderPassDescriptor *desc);
        """
        raise NotImplementedError()

    def command_encoder_copy_buffer_to_buffer(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: int, source_offset: int, destination: int, destination_offset: int, size: int):
        """
        void wgpu_command_encoder_copy_buffer_to_buffer(WGPUCommandEncoderId command_encoder_id,
                                                        WGPUBufferId source,
                                                        WGPUBufferAddress source_offset,
                                                        WGPUBufferId destination,
                                                        WGPUBufferAddress destination_offset,
                                                        WGPUBufferAddress size);
        """
        raise NotImplementedError()

    def command_encoder_copy_buffer_to_texture(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'BufferCopyView', destination: 'TextureCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_buffer_to_texture(WGPUCommandEncoderId command_encoder_id,
                                                         const WGPUBufferCopyView *source,
                                                         const WGPUTextureCopyView *destination,
                                                         WGPUExtent3d copy_size);
        """
        raise NotImplementedError()

    def command_encoder_copy_texture_to_buffer(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'TextureCopyView', destination: 'BufferCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_texture_to_buffer(WGPUCommandEncoderId command_encoder_id,
                                                         const WGPUTextureCopyView *source,
                                                         const WGPUBufferCopyView *destination,
                                                         WGPUExtent3d copy_size);
        """
        raise NotImplementedError()

    def command_encoder_copy_texture_to_texture(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'TextureCopyView', destination: 'TextureCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_texture_to_texture(WGPUCommandEncoderId command_encoder_id,
                                                          const WGPUTextureCopyView *source,
                                                          const WGPUTextureCopyView *destination,
                                                          WGPUExtent3d copy_size);
        """
        raise NotImplementedError()

    def command_encoder_finish(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'CommandBufferDescriptor'):
        """
        WGPUCommandBufferId wgpu_command_encoder_finish(WGPUCommandEncoderId encoder_id,
                                                        const WGPUCommandBufferDescriptor *desc);
        """
        raise NotImplementedError()

    def compute_pass_dispatch(self, pass_id: int, x: int, y: int, z: int):
        """
        void wgpu_compute_pass_dispatch(WGPUComputePassId pass_id, uint32_t x, uint32_t y, uint32_t z);
        """
        raise NotImplementedError()

    def compute_pass_dispatch_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_compute_pass_dispatch_indirect(WGPUComputePassId pass_id,
                                                 WGPUBufferId indirect_buffer_id,
                                                 WGPUBufferAddress indirect_offset);
        """
        raise NotImplementedError()

    def compute_pass_end_pass(self, pass_id: int):
        """
        void wgpu_compute_pass_end_pass(WGPUComputePassId pass_id);
        """
        raise NotImplementedError()

    def compute_pass_insert_debug_marker(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_compute_pass_insert_debug_marker(WGPUComputePassId _pass_id, WGPURawString _label);
        """
        raise NotImplementedError()

    def compute_pass_pop_debug_group(self, _pass_id: int):
        """
        void wgpu_compute_pass_pop_debug_group(WGPUComputePassId _pass_id);
        """
        raise NotImplementedError()

    def compute_pass_push_debug_group(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_compute_pass_push_debug_group(WGPUComputePassId _pass_id, WGPURawString _label);
        """
        raise NotImplementedError()

    def compute_pass_set_bind_group(self, pass_id: int, index: int, bind_group_id: int, offsets: int, offsets_length: 'uintptr'):
        """
        void wgpu_compute_pass_set_bind_group(WGPUComputePassId pass_id,
                                              uint32_t index,
                                              WGPUBindGroupId bind_group_id,
                                              const WGPUBufferAddress *offsets,
                                              uintptr_t offsets_length);
        """
        raise NotImplementedError()

    def compute_pass_set_pipeline(self, pass_id: int, pipeline_id: int):
        """
        void wgpu_compute_pass_set_pipeline(WGPUComputePassId pass_id, WGPUComputePipelineId pipeline_id);
        """
        raise NotImplementedError()

    def create_surface_from_metal_layer(self, layer):
        """
        WGPUSurfaceId wgpu_create_surface_from_metal_layer(void *layer);
        """
        raise NotImplementedError()

    def create_surface_from_windows_hwnd(self, _hinstance, hwnd):
        """
        WGPUSurfaceId wgpu_create_surface_from_windows_hwnd(void *_hinstance, void *hwnd);
        """
        raise NotImplementedError()

    def create_surface_from_xlib(self, display, window: int):
        """
        WGPUSurfaceId wgpu_create_surface_from_xlib(const void **display, uint64_t window);
        """
        raise NotImplementedError()

    def device_create_bind_group(self, device_id: int, desc: 'BindGroupDescriptor'):
        """
        WGPUBindGroupId wgpu_device_create_bind_group(WGPUDeviceId device_id,
                                                      const WGPUBindGroupDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_bind_group_layout(self, device_id: int, desc: 'BindGroupLayoutDescriptor'):
        """
        WGPUBindGroupLayoutId wgpu_device_create_bind_group_layout(WGPUDeviceId device_id,
                                                                   const WGPUBindGroupLayoutDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_buffer(self, device_id: int, desc: 'BufferDescriptor'):
        """
        WGPUBufferId wgpu_device_create_buffer(WGPUDeviceId device_id, const WGPUBufferDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_buffer_mapped(self, device_id: int, desc: 'BufferDescriptor', mapped_ptr_out: 'uint8'):
        """
        WGPUBufferId wgpu_device_create_buffer_mapped(WGPUDeviceId device_id,
                                                      const WGPUBufferDescriptor *desc,
                                                      uint8_t **mapped_ptr_out);
        """
        raise NotImplementedError()

    def device_create_command_encoder(self, device_id: int, desc: 'CommandEncoderDescriptor'):
        """
        WGPUCommandEncoderId wgpu_device_create_command_encoder(WGPUDeviceId device_id,
                                                                const WGPUCommandEncoderDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_compute_pipeline(self, device_id: int, desc: 'ComputePipelineDescriptor'):
        """
        WGPUComputePipelineId wgpu_device_create_compute_pipeline(WGPUDeviceId device_id,
                                                                  const WGPUComputePipelineDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_pipeline_layout(self, device_id: int, desc: 'PipelineLayoutDescriptor'):
        """
        WGPUPipelineLayoutId wgpu_device_create_pipeline_layout(WGPUDeviceId device_id,
                                                                const WGPUPipelineLayoutDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_render_pipeline(self, device_id: int, desc: 'RenderPipelineDescriptor'):
        """
        WGPURenderPipelineId wgpu_device_create_render_pipeline(WGPUDeviceId device_id,
                                                                const WGPURenderPipelineDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_sampler(self, device_id: int, desc: 'SamplerDescriptor'):
        """
        WGPUSamplerId wgpu_device_create_sampler(WGPUDeviceId device_id, const WGPUSamplerDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_shader_module(self, device_id: int, desc: 'ShaderModuleDescriptor'):
        """
        WGPUShaderModuleId wgpu_device_create_shader_module(WGPUDeviceId device_id,
                                                            const WGPUShaderModuleDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_swap_chain(self, device_id: int, surface_id: int, desc: 'SwapChainDescriptor'):
        """
        WGPUSwapChainId wgpu_device_create_swap_chain(WGPUDeviceId device_id,
                                                      WGPUSurfaceId surface_id,
                                                      const WGPUSwapChainDescriptor *desc);
        """
        raise NotImplementedError()

    def device_create_texture(self, device_id: int, desc: 'TextureDescriptor'):
        """
        WGPUTextureId wgpu_device_create_texture(WGPUDeviceId device_id, const WGPUTextureDescriptor *desc);
        """
        raise NotImplementedError()

    def device_destroy(self, device_id: int):
        """
        void wgpu_device_destroy(WGPUDeviceId device_id);
        """
        raise NotImplementedError()

    def device_get_limits(self, _device_id: int, limits: 'Limits'):
        """
        void wgpu_device_get_limits(WGPUDeviceId _device_id, WGPULimits *limits);
        """
        raise NotImplementedError()

    def device_get_queue(self, device_id: int):
        """
        WGPUQueueId wgpu_device_get_queue(WGPUDeviceId device_id);
        """
        raise NotImplementedError()

    def device_poll(self, device_id: int, force_wait: 'bool'):
        """
        void wgpu_device_poll(WGPUDeviceId device_id, bool force_wait);
        """
        raise NotImplementedError()

    def queue_submit(self, queue_id: 'Id_Device_Dummy', command_buffers: int, command_buffers_length: 'uintptr'):
        """
        void wgpu_queue_submit(WGPUQueueId queue_id,
                               const WGPUCommandBufferId *command_buffers,
                               uintptr_t command_buffers_length);
        """
        raise NotImplementedError()

    def render_pass_draw(self, pass_id: int, vertex_count: int, instance_count: int, first_vertex: int, first_instance: int):
        """
        void wgpu_render_pass_draw(WGPURenderPassId pass_id,
                                   uint32_t vertex_count,
                                   uint32_t instance_count,
                                   uint32_t first_vertex,
                                   uint32_t first_instance);
        """
        raise NotImplementedError()

    def render_pass_draw_indexed(self, pass_id: int, index_count: int, instance_count: int, first_index: int, base_vertex: int, first_instance: int):
        """
        void wgpu_render_pass_draw_indexed(WGPURenderPassId pass_id,
                                           uint32_t index_count,
                                           uint32_t instance_count,
                                           uint32_t first_index,
                                           int32_t base_vertex,
                                           uint32_t first_instance);
        """
        raise NotImplementedError()

    def render_pass_draw_indexed_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_render_pass_draw_indexed_indirect(WGPURenderPassId pass_id,
                                                    WGPUBufferId indirect_buffer_id,
                                                    WGPUBufferAddress indirect_offset);
        """
        raise NotImplementedError()

    def render_pass_draw_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_render_pass_draw_indirect(WGPURenderPassId pass_id,
                                            WGPUBufferId indirect_buffer_id,
                                            WGPUBufferAddress indirect_offset);
        """
        raise NotImplementedError()

    def render_pass_end_pass(self, pass_id: int):
        """
        void wgpu_render_pass_end_pass(WGPURenderPassId pass_id);
        """
        raise NotImplementedError()

    def render_pass_execute_bundles(self, _pass_id: int, _bundles: int, _bundles_length: 'uintptr'):
        """
        void wgpu_render_pass_execute_bundles(WGPURenderPassId _pass_id,
                                              const WGPURenderBundleId *_bundles,
                                              uintptr_t _bundles_length);
        """
        raise NotImplementedError()

    def render_pass_insert_debug_marker(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_render_pass_insert_debug_marker(WGPURenderPassId _pass_id, WGPURawString _label);
        """
        raise NotImplementedError()

    def render_pass_pop_debug_group(self, _pass_id: int):
        """
        void wgpu_render_pass_pop_debug_group(WGPURenderPassId _pass_id);
        """
        raise NotImplementedError()

    def render_pass_push_debug_group(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_render_pass_push_debug_group(WGPURenderPassId _pass_id, WGPURawString _label);
        """
        raise NotImplementedError()

    def render_pass_set_bind_group(self, pass_id: int, index: int, bind_group_id: int, offsets: int, offsets_length: 'uintptr'):
        """
        void wgpu_render_pass_set_bind_group(WGPURenderPassId pass_id,
                                             uint32_t index,
                                             WGPUBindGroupId bind_group_id,
                                             const WGPUBufferAddress *offsets,
                                             uintptr_t offsets_length);
        """
        raise NotImplementedError()

    def render_pass_set_blend_color(self, pass_id: int, color: 'Color'):
        """
        void wgpu_render_pass_set_blend_color(WGPURenderPassId pass_id, const WGPUColor *color);
        """
        raise NotImplementedError()

    def render_pass_set_index_buffer(self, pass_id: int, buffer_id: int, offset: int):
        """
        void wgpu_render_pass_set_index_buffer(WGPURenderPassId pass_id,
                                               WGPUBufferId buffer_id,
                                               WGPUBufferAddress offset);
        """
        raise NotImplementedError()

    def render_pass_set_pipeline(self, pass_id: int, pipeline_id: int):
        """
        void wgpu_render_pass_set_pipeline(WGPURenderPassId pass_id, WGPURenderPipelineId pipeline_id);
        """
        raise NotImplementedError()

    def render_pass_set_scissor_rect(self, pass_id: int, x: int, y: int, w: int, h: int):
        """
        void wgpu_render_pass_set_scissor_rect(WGPURenderPassId pass_id,
                                               uint32_t x,
                                               uint32_t y,
                                               uint32_t w,
                                               uint32_t h);
        """
        raise NotImplementedError()

    def render_pass_set_stencil_reference(self, pass_id: int, value: int):
        """
        void wgpu_render_pass_set_stencil_reference(WGPURenderPassId pass_id, uint32_t value);
        """
        raise NotImplementedError()

    def render_pass_set_vertex_buffers(self, pass_id: int, start_slot: int, buffers: int, offsets: int, length: 'uintptr'):
        """
        void wgpu_render_pass_set_vertex_buffers(WGPURenderPassId pass_id,
                                                 uint32_t start_slot,
                                                 const WGPUBufferId *buffers,
                                                 const WGPUBufferAddress *offsets,
                                                 uintptr_t length);
        """
        raise NotImplementedError()

    def render_pass_set_viewport(self, pass_id: int, x: float, y: float, w: float, h: float, min_depth: float, max_depth: float):
        """
        void wgpu_render_pass_set_viewport(WGPURenderPassId pass_id,
                                           float x,
                                           float y,
                                           float w,
                                           float h,
                                           float min_depth,
                                           float max_depth);
        """
        raise NotImplementedError()

    def request_adapter(self, desc: 'RequestAdapterOptions'):
        """
        WGPUAdapterId wgpu_request_adapter(const WGPURequestAdapterOptions *desc);
        """
        raise NotImplementedError()

    def sampler_destroy(self, sampler_id: int):
        """
        void wgpu_sampler_destroy(WGPUSamplerId sampler_id);
        """
        raise NotImplementedError()

    def swap_chain_get_next_texture(self, swap_chain_id: int):
        """
        WGPUSwapChainOutput wgpu_swap_chain_get_next_texture(WGPUSwapChainId swap_chain_id);
        """
        raise NotImplementedError()

    def swap_chain_present(self, swap_chain_id: int):
        """
        void wgpu_swap_chain_present(WGPUSwapChainId swap_chain_id);
        """
        raise NotImplementedError()

    def texture_create_view(self, texture_id: int, desc: 'TextureViewDescriptor'):
        """
        WGPUTextureViewId wgpu_texture_create_view(WGPUTextureId texture_id,
                                                   const WGPUTextureViewDescriptor *desc);
        """
        raise NotImplementedError()

    def texture_destroy(self, texture_id: int):
        """
        void wgpu_texture_destroy(WGPUTextureId texture_id);
        """
        raise NotImplementedError()

    def texture_view_destroy(self, texture_view_id: int):
        """
        void wgpu_texture_view_destroy(WGPUTextureViewId texture_view_id);
        """
        raise NotImplementedError()

    # %% Structs (43)


    def create_Extensions(self, *, anisotropic_filtering: 'bool'):
        """ bool anisotropic_filtering """
        return {"anisotropic_filtering": anisotropic_filtering}

    def create_Limits(self, *, max_bind_groups: int):
        """ uint32_t max_bind_groups """
        return {"max_bind_groups": max_bind_groups}

    def create_DeviceDescriptor(self, *, extensions: 'Extensions', limits: 'Limits'):
        """ WGPUExtensions extensions, WGPULimits limits """
        return {"extensions": extensions, "limits": limits}

    def create_ComputePassDescriptor(self, *, todo: int):
        """ uint32_t todo """
        return {"todo": todo}

    def create_Color(self, *, r: float, g: float, b: float, a: float):
        """ double r, double g, double b, double a """
        return {"r": r, "g": g, "b": b, "a": a}

    def create_RenderPassColorAttachmentDescriptor(self, *, attachment: int, resolve_target: int, load_op: 'LoadOp', store_op: 'StoreOp', clear_color: 'Color'):
        """ WGPUTextureViewId attachment, WGPUTextureViewId resolve_target, WGPULoadOp load_op, WGPUStoreOp store_op, WGPUColor clear_color """
        return {"attachment": attachment, "resolve_target": resolve_target, "load_op": load_op, "store_op": store_op, "clear_color": clear_color}

    def create_RenderPassDepthStencilAttachmentDescriptor_TextureViewId(self, *, attachment: int, depth_load_op: 'LoadOp', depth_store_op: 'StoreOp', clear_depth: float, stencil_load_op: 'LoadOp', stencil_store_op: 'StoreOp', clear_stencil: int):
        """ WGPUTextureViewId attachment, WGPULoadOp depth_load_op, WGPUStoreOp depth_store_op, float clear_depth, WGPULoadOp stencil_load_op, WGPUStoreOp stencil_store_op, uint32_t clear_stencil """
        return {"attachment": attachment, "depth_load_op": depth_load_op, "depth_store_op": depth_store_op, "clear_depth": clear_depth, "stencil_load_op": stencil_load_op, "stencil_store_op": stencil_store_op, "clear_stencil": clear_stencil}

    def create_RenderPassDescriptor(self, *, color_attachments: 'RenderPassColorAttachmentDescriptor', color_attachments_length: 'uintptr', depth_stencil_attachment: 'RenderPassDepthStencilAttachmentDescriptor_TextureViewId'):
        """ WGPURenderPassColorAttachmentDescriptor color_attachments, uintptr_t color_attachments_length, WGPURenderPassDepthStencilAttachmentDescriptor_TextureViewId depth_stencil_attachment """
        return {"color_attachments": color_attachments, "color_attachments_length": color_attachments_length, "depth_stencil_attachment": depth_stencil_attachment}

    def create_BufferCopyView(self, *, buffer: int, offset: int, row_pitch: int, image_height: int):
        """ WGPUBufferId buffer, WGPUBufferAddress offset, uint32_t row_pitch, uint32_t image_height """
        return {"buffer": buffer, "offset": offset, "row_pitch": row_pitch, "image_height": image_height}

    def create_Origin3d(self, *, x: float, y: float, z: float):
        """ float x, float y, float z """
        return {"x": x, "y": y, "z": z}

    def create_TextureCopyView(self, *, texture: int, mip_level: int, array_layer: int, origin: 'Origin3d'):
        """ WGPUTextureId texture, uint32_t mip_level, uint32_t array_layer, WGPUOrigin3d origin """
        return {"texture": texture, "mip_level": mip_level, "array_layer": array_layer, "origin": origin}

    def create_Extent3d(self, *, width: int, height: int, depth: int):
        """ uint32_t width, uint32_t height, uint32_t depth """
        return {"width": width, "height": height, "depth": depth}

    def create_CommandBufferDescriptor(self, *, todo: int):
        """ uint32_t todo """
        return {"todo": todo}

    def create_BufferBinding(self, *, buffer: int, offset: int, size: int):
        """ WGPUBufferId buffer, WGPUBufferAddress offset, WGPUBufferAddress size """
        return {"buffer": buffer, "offset": offset, "size": size}

    def create_BindingResource_WGPUBuffer_Body(self, *, _0: 'BufferBinding'):
        """ WGPUBufferBinding _0 """
        return {"_0": _0}

    def create_BindingResource_WGPUSampler_Body(self, *, _0: int):
        """ WGPUSamplerId _0 """
        return {"_0": _0}

    def create_BindingResource_WGPUTextureView_Body(self, *, _0: int):
        """ WGPUTextureViewId _0 """
        return {"_0": _0}

    def create_BindGroupBinding(self, *, binding: int, resource: 'BindingResource'):
        """ uint32_t binding, WGPUBindingResource resource """
        return {"binding": binding, "resource": resource}

    def create_BindGroupDescriptor(self, *, layout: int, bindings: 'BindGroupBinding', bindings_length: 'uintptr'):
        """ WGPUBindGroupLayoutId layout, WGPUBindGroupBinding bindings, uintptr_t bindings_length """
        return {"layout": layout, "bindings": bindings, "bindings_length": bindings_length}

    def create_BindGroupLayoutBinding(self, *, binding: int, visibility: int, ty: 'BindingType', texture_dimension: 'TextureViewDimension', multisampled: 'bool', dynamic: 'bool'):
        """ uint32_t binding, WGPUShaderStage visibility, WGPUBindingType ty, WGPUTextureViewDimension texture_dimension, bool multisampled, bool dynamic """
        return {"binding": binding, "visibility": visibility, "ty": ty, "texture_dimension": texture_dimension, "multisampled": multisampled, "dynamic": dynamic}

    def create_BindGroupLayoutDescriptor(self, *, bindings: 'BindGroupLayoutBinding', bindings_length: 'uintptr'):
        """ WGPUBindGroupLayoutBinding bindings, uintptr_t bindings_length """
        return {"bindings": bindings, "bindings_length": bindings_length}

    def create_BufferDescriptor(self, *, size: int, usage: int):
        """ WGPUBufferAddress size, WGPUBufferUsage usage """
        return {"size": size, "usage": usage}

    def create_CommandEncoderDescriptor(self, *, todo: int):
        """ uint32_t todo """
        return {"todo": todo}

    def create_ProgrammableStageDescriptor(self, *, module: int, entry_point: 'RawString'):
        """ WGPUShaderModuleId module, WGPURawString entry_point """
        return {"module": module, "entry_point": entry_point}

    def create_ComputePipelineDescriptor(self, *, layout: int, compute_stage: 'ProgrammableStageDescriptor'):
        """ WGPUPipelineLayoutId layout, WGPUProgrammableStageDescriptor compute_stage """
        return {"layout": layout, "compute_stage": compute_stage}

    def create_PipelineLayoutDescriptor(self, *, bind_group_layouts: int, bind_group_layouts_length: 'uintptr'):
        """ WGPUBindGroupLayoutId bind_group_layouts, uintptr_t bind_group_layouts_length """
        return {"bind_group_layouts": bind_group_layouts, "bind_group_layouts_length": bind_group_layouts_length}

    def create_RasterizationStateDescriptor(self, *, front_face: 'FrontFace', cull_mode: 'CullMode', depth_bias: int, depth_bias_slope_scale: float, depth_bias_clamp: float):
        """ WGPUFrontFace front_face, WGPUCullMode cull_mode, int32_t depth_bias, float depth_bias_slope_scale, float depth_bias_clamp """
        return {"front_face": front_face, "cull_mode": cull_mode, "depth_bias": depth_bias, "depth_bias_slope_scale": depth_bias_slope_scale, "depth_bias_clamp": depth_bias_clamp}

    def create_BlendDescriptor(self, *, src_factor: 'BlendFactor', dst_factor: 'BlendFactor', operation: 'BlendOperation'):
        """ WGPUBlendFactor src_factor, WGPUBlendFactor dst_factor, WGPUBlendOperation operation """
        return {"src_factor": src_factor, "dst_factor": dst_factor, "operation": operation}

    def create_ColorStateDescriptor(self, *, format: 'TextureFormat', alpha_blend: 'BlendDescriptor', color_blend: 'BlendDescriptor', write_mask: int):
        """ WGPUTextureFormat format, WGPUBlendDescriptor alpha_blend, WGPUBlendDescriptor color_blend, WGPUColorWrite write_mask """
        return {"format": format, "alpha_blend": alpha_blend, "color_blend": color_blend, "write_mask": write_mask}

    def create_StencilStateFaceDescriptor(self, *, compare: 'CompareFunction', fail_op: 'StencilOperation', depth_fail_op: 'StencilOperation', pass_op: 'StencilOperation'):
        """ WGPUCompareFunction compare, WGPUStencilOperation fail_op, WGPUStencilOperation depth_fail_op, WGPUStencilOperation pass_op """
        return {"compare": compare, "fail_op": fail_op, "depth_fail_op": depth_fail_op, "pass_op": pass_op}

    def create_DepthStencilStateDescriptor(self, *, format: 'TextureFormat', depth_write_enabled: 'bool', depth_compare: 'CompareFunction', stencil_front: 'StencilStateFaceDescriptor', stencil_back: 'StencilStateFaceDescriptor', stencil_read_mask: int, stencil_write_mask: int):
        """ WGPUTextureFormat format, bool depth_write_enabled, WGPUCompareFunction depth_compare, WGPUStencilStateFaceDescriptor stencil_front, WGPUStencilStateFaceDescriptor stencil_back, uint32_t stencil_read_mask, uint32_t stencil_write_mask """
        return {"format": format, "depth_write_enabled": depth_write_enabled, "depth_compare": depth_compare, "stencil_front": stencil_front, "stencil_back": stencil_back, "stencil_read_mask": stencil_read_mask, "stencil_write_mask": stencil_write_mask}

    def create_VertexAttributeDescriptor(self, *, offset: int, format: 'VertexFormat', shader_location: int):
        """ WGPUBufferAddress offset, WGPUVertexFormat format, WGPUShaderLocation shader_location """
        return {"offset": offset, "format": format, "shader_location": shader_location}

    def create_VertexBufferDescriptor(self, *, stride: int, step_mode: 'InputStepMode', attributes: 'VertexAttributeDescriptor', attributes_length: 'uintptr'):
        """ WGPUBufferAddress stride, WGPUInputStepMode step_mode, WGPUVertexAttributeDescriptor attributes, uintptr_t attributes_length """
        return {"stride": stride, "step_mode": step_mode, "attributes": attributes, "attributes_length": attributes_length}

    def create_VertexInputDescriptor(self, *, index_format: 'IndexFormat', vertex_buffers: 'VertexBufferDescriptor', vertex_buffers_length: 'uintptr'):
        """ WGPUIndexFormat index_format, WGPUVertexBufferDescriptor vertex_buffers, uintptr_t vertex_buffers_length """
        return {"index_format": index_format, "vertex_buffers": vertex_buffers, "vertex_buffers_length": vertex_buffers_length}

    def create_RenderPipelineDescriptor(self, *, layout: int, vertex_stage: 'ProgrammableStageDescriptor', fragment_stage: 'ProgrammableStageDescriptor', primitive_topology: 'PrimitiveTopology', rasterization_state: 'RasterizationStateDescriptor', color_states: 'ColorStateDescriptor', color_states_length: 'uintptr', depth_stencil_state: 'DepthStencilStateDescriptor', vertex_input: 'VertexInputDescriptor', sample_count: int, sample_mask: int, alpha_to_coverage_enabled: 'bool'):
        """ WGPUPipelineLayoutId layout, WGPUProgrammableStageDescriptor vertex_stage, WGPUProgrammableStageDescriptor fragment_stage, WGPUPrimitiveTopology primitive_topology, WGPURasterizationStateDescriptor rasterization_state, WGPUColorStateDescriptor color_states, uintptr_t color_states_length, WGPUDepthStencilStateDescriptor depth_stencil_state, WGPUVertexInputDescriptor vertex_input, uint32_t sample_count, uint32_t sample_mask, bool alpha_to_coverage_enabled """
        return {"layout": layout, "vertex_stage": vertex_stage, "fragment_stage": fragment_stage, "primitive_topology": primitive_topology, "rasterization_state": rasterization_state, "color_states": color_states, "color_states_length": color_states_length, "depth_stencil_state": depth_stencil_state, "vertex_input": vertex_input, "sample_count": sample_count, "sample_mask": sample_mask, "alpha_to_coverage_enabled": alpha_to_coverage_enabled}

    def create_SamplerDescriptor(self, *, address_mode_u: 'AddressMode', address_mode_v: 'AddressMode', address_mode_w: 'AddressMode', mag_filter: 'FilterMode', min_filter: 'FilterMode', mipmap_filter: 'FilterMode', lod_min_clamp: float, lod_max_clamp: float, compare_function: 'CompareFunction'):
        """ WGPUAddressMode address_mode_u, WGPUAddressMode address_mode_v, WGPUAddressMode address_mode_w, WGPUFilterMode mag_filter, WGPUFilterMode min_filter, WGPUFilterMode mipmap_filter, float lod_min_clamp, float lod_max_clamp, WGPUCompareFunction compare_function """
        return {"address_mode_u": address_mode_u, "address_mode_v": address_mode_v, "address_mode_w": address_mode_w, "mag_filter": mag_filter, "min_filter": min_filter, "mipmap_filter": mipmap_filter, "lod_min_clamp": lod_min_clamp, "lod_max_clamp": lod_max_clamp, "compare_function": compare_function}

    def create_U32Array(self, *, bytes: int, length: 'uintptr'):
        """ uint32_t bytes, uintptr_t length """
        return {"bytes": bytes, "length": length}

    def create_ShaderModuleDescriptor(self, *, code: 'U32Array'):
        """ WGPUU32Array code """
        return {"code": code}

    def create_SwapChainDescriptor(self, *, usage: int, format: 'TextureFormat', width: int, height: int, present_mode: 'PresentMode'):
        """ WGPUTextureUsage usage, WGPUTextureFormat format, uint32_t width, uint32_t height, WGPUPresentMode present_mode """
        return {"usage": usage, "format": format, "width": width, "height": height, "present_mode": present_mode}

    def create_TextureDescriptor(self, *, size: 'Extent3d', array_layer_count: int, mip_level_count: int, sample_count: int, dimension: 'TextureDimension', format: 'TextureFormat', usage: int):
        """ WGPUExtent3d size, uint32_t array_layer_count, uint32_t mip_level_count, uint32_t sample_count, WGPUTextureDimension dimension, WGPUTextureFormat format, WGPUTextureUsage usage """
        return {"size": size, "array_layer_count": array_layer_count, "mip_level_count": mip_level_count, "sample_count": sample_count, "dimension": dimension, "format": format, "usage": usage}

    def create_RequestAdapterOptions(self, *, power_preference: 'PowerPreference', backends: int):
        """ WGPUPowerPreference power_preference, WGPUBackendBit backends """
        return {"power_preference": power_preference, "backends": backends}

    def create_SwapChainOutput(self, *, view_id: int):
        """ WGPUTextureViewId view_id """
        return {"view_id": view_id}

    def create_TextureViewDescriptor(self, *, format: 'TextureFormat', dimension: 'TextureViewDimension', aspect: 'TextureAspect', base_mip_level: int, level_count: int, base_array_layer: int, array_layer_count: int):
        """ WGPUTextureFormat format, WGPUTextureViewDimension dimension, WGPUTextureAspect aspect, uint32_t base_mip_level, uint32_t level_count, uint32_t base_array_layer, uint32_t array_layer_count """
        return {"format": format, "dimension": dimension, "aspect": aspect, "base_mip_level": base_mip_level, "level_count": level_count, "base_array_layer": base_array_layer, "array_layer_count": array_layer_count}

    # %% Constants (33)

    DESIRED_NUM_FRAMES = 3
    MAX_BIND_GROUPS = 4
    MAX_COLOR_TARGETS = 4
    MAX_MIP_LEVELS = 16
    MAX_VERTEX_BUFFERS = 8
    ShaderStage_NONE = 0
    ShaderStage_VERTEX = 1
    ShaderStage_FRAGMENT = 2
    ShaderStage_COMPUTE = 4
    BufferUsage_MAP_READ = 1
    BufferUsage_MAP_WRITE = 2
    BufferUsage_COPY_SRC = 4
    BufferUsage_COPY_DST = 8
    BufferUsage_INDEX = 16
    BufferUsage_VERTEX = 32
    BufferUsage_UNIFORM = 64
    BufferUsage_STORAGE = 128
    BufferUsage_STORAGE_READ = 256
    BufferUsage_INDIRECT = 512
    BufferUsage_NONE = 0
    ColorWrite_RED = 1
    ColorWrite_GREEN = 2
    ColorWrite_BLUE = 4
    ColorWrite_ALPHA = 8
    ColorWrite_COLOR = 7
    ColorWrite_ALL = 15
    TextureUsage_COPY_SRC = 1
    TextureUsage_COPY_DST = 2
    TextureUsage_SAMPLED = 4
    TextureUsage_STORAGE = 8
    TextureUsage_OUTPUT_ATTACHMENT = 16
    TextureUsage_NONE = 0
    TextureUsage_UNINITIALIZED = 65535

    # %% Enums (23)

    # AddressMode
    AddressMode_ClampToEdge = 0
    AddressMode_Repeat = 1
    AddressMode_MirrorRepeat = 2
    # BindingType
    BindingType_UniformBuffer = 0
    BindingType_StorageBuffer = 1
    BindingType_ReadonlyStorageBuffer = 2
    BindingType_Sampler = 3
    BindingType_SampledTexture = 4
    BindingType_StorageTexture = 5
    # BlendFactor
    BlendFactor_Zero = 0
    BlendFactor_One = 1
    BlendFactor_SrcColor = 2
    BlendFactor_OneMinusSrcColor = 3
    BlendFactor_SrcAlpha = 4
    BlendFactor_OneMinusSrcAlpha = 5
    BlendFactor_DstColor = 6
    BlendFactor_OneMinusDstColor = 7
    BlendFactor_DstAlpha = 8
    BlendFactor_OneMinusDstAlpha = 9
    BlendFactor_SrcAlphaSaturated = 10
    BlendFactor_BlendColor = 11
    BlendFactor_OneMinusBlendColor = 12
    # BlendOperation
    BlendOperation_Add = 0
    BlendOperation_Subtract = 1
    BlendOperation_ReverseSubtract = 2
    BlendOperation_Min = 3
    BlendOperation_Max = 4
    # BufferMapAsyncStatus
    BufferMapAsyncStatus_Success = 0
    BufferMapAsyncStatus_Error = 1
    BufferMapAsyncStatus_Unknown = 2
    BufferMapAsyncStatus_ContextLost = 3
    # CompareFunction
    CompareFunction_Never = 0
    CompareFunction_Less = 1
    CompareFunction_Equal = 2
    CompareFunction_LessEqual = 3
    CompareFunction_Greater = 4
    CompareFunction_NotEqual = 5
    CompareFunction_GreaterEqual = 6
    CompareFunction_Always = 7
    # CullMode
    CullMode_None = 0
    CullMode_Front = 1
    CullMode_Back = 2
    # FilterMode
    FilterMode_Nearest = 0
    FilterMode_Linear = 1
    # FrontFace
    FrontFace_Ccw = 0
    FrontFace_Cw = 1
    # IndexFormat
    IndexFormat_Uint16 = 0
    IndexFormat_Uint32 = 1
    # InputStepMode
    InputStepMode_Vertex = 0
    InputStepMode_Instance = 1
    # LoadOp
    LoadOp_Clear = 0
    LoadOp_Load = 1
    # PowerPreference
    PowerPreference_Default = 0
    PowerPreference_LowPower = 1
    PowerPreference_HighPerformance = 2
    # PresentMode
    PresentMode_NoVsync = 0
    PresentMode_Vsync = 1
    # PrimitiveTopology
    PrimitiveTopology_PointList = 0
    PrimitiveTopology_LineList = 1
    PrimitiveTopology_LineStrip = 2
    PrimitiveTopology_TriangleList = 3
    PrimitiveTopology_TriangleStrip = 4
    # StencilOperation
    StencilOperation_Keep = 0
    StencilOperation_Zero = 1
    StencilOperation_Replace = 2
    StencilOperation_Invert = 3
    StencilOperation_IncrementClamp = 4
    StencilOperation_DecrementClamp = 5
    StencilOperation_IncrementWrap = 6
    StencilOperation_DecrementWrap = 7
    # StoreOp
    StoreOp_Clear = 0
    StoreOp_Store = 1
    # TextureAspect
    TextureAspect_All = 0
    TextureAspect_StencilOnly = 1
    TextureAspect_DepthOnly = 2
    # TextureDimension
    TextureDimension_D1 = 0
    TextureDimension_D2 = 1
    TextureDimension_D3 = 2
    # TextureFormat
    TextureFormat_R8Unorm = 0
    TextureFormat_R8Snorm = 1
    TextureFormat_R8Uint = 2
    TextureFormat_R8Sint = 3
    TextureFormat_R16Unorm = 4
    TextureFormat_R16Snorm = 5
    TextureFormat_R16Uint = 6
    TextureFormat_R16Sint = 7
    TextureFormat_R16Float = 8
    TextureFormat_Rg8Unorm = 9
    TextureFormat_Rg8Snorm = 10
    TextureFormat_Rg8Uint = 11
    TextureFormat_Rg8Sint = 12
    TextureFormat_R32Uint = 13
    TextureFormat_R32Sint = 14
    TextureFormat_R32Float = 15
    TextureFormat_Rg16Unorm = 16
    TextureFormat_Rg16Snorm = 17
    TextureFormat_Rg16Uint = 18
    TextureFormat_Rg16Sint = 19
    TextureFormat_Rg16Float = 20
    TextureFormat_Rgba8Unorm = 21
    TextureFormat_Rgba8UnormSrgb = 22
    TextureFormat_Rgba8Snorm = 23
    TextureFormat_Rgba8Uint = 24
    TextureFormat_Rgba8Sint = 25
    TextureFormat_Bgra8Unorm = 26
    TextureFormat_Bgra8UnormSrgb = 27
    TextureFormat_Rgb10a2Unorm = 28
    TextureFormat_Rg11b10Float = 29
    TextureFormat_Rg32Uint = 30
    TextureFormat_Rg32Sint = 31
    TextureFormat_Rg32Float = 32
    TextureFormat_Rgba16Unorm = 33
    TextureFormat_Rgba16Snorm = 34
    TextureFormat_Rgba16Uint = 35
    TextureFormat_Rgba16Sint = 36
    TextureFormat_Rgba16Float = 37
    TextureFormat_Rgba32Uint = 38
    TextureFormat_Rgba32Sint = 39
    TextureFormat_Rgba32Float = 40
    TextureFormat_Depth32Float = 41
    TextureFormat_Depth24Plus = 42
    TextureFormat_Depth24PlusStencil8 = 43
    # TextureViewDimension
    TextureViewDimension_D1 = 0
    TextureViewDimension_D2 = 1
    TextureViewDimension_D2Array = 2
    TextureViewDimension_Cube = 3
    TextureViewDimension_CubeArray = 4
    TextureViewDimension_D3 = 5
    # VertexFormat
    VertexFormat_Uchar2 = 1
    VertexFormat_Uchar4 = 3
    VertexFormat_Char2 = 5
    VertexFormat_Char4 = 7
    VertexFormat_Uchar2Norm = 9
    VertexFormat_Uchar4Norm = 11
    VertexFormat_Char2Norm = 14
    VertexFormat_Char4Norm = 16
    VertexFormat_Ushort2 = 18
    VertexFormat_Ushort4 = 20
    VertexFormat_Short2 = 22
    VertexFormat_Short4 = 24
    VertexFormat_Ushort2Norm = 26
    VertexFormat_Ushort4Norm = 28
    VertexFormat_Short2Norm = 30
    VertexFormat_Short4Norm = 32
    VertexFormat_Half2 = 34
    VertexFormat_Half4 = 36
    VertexFormat_Float = 37
    VertexFormat_Float2 = 38
    VertexFormat_Float3 = 39
    VertexFormat_Float4 = 40
    VertexFormat_Uint = 41
    VertexFormat_Uint2 = 42
    VertexFormat_Uint3 = 43
    VertexFormat_Uint4 = 44
    VertexFormat_Int = 45
    VertexFormat_Int2 = 46
    VertexFormat_Int3 = 47
    VertexFormat_Int4 = 48
    # BindingResource_Tag
    BindingResource_Buffer = 0
    BindingResource_Sampler = 1
    BindingResource_TextureView = 2
