"""
THIS CODE IS AUTOGENERATED - DO NOT EDIT
"""


import os
import ctypes

from .wgpu import BaseWGPU


_lib_filename = os.path.join(os.path.dirname(os.path.abspath(__file__)), "wgpu_native-release.dll")
_lib = ctypes.windll.LoadLibrary(_lib_filename)


def dict_to_struct(d, struct_class):
    args = []
    for key, t in struct_class._fields_:
        val = d[key]
        if issubclass(t, ctypes.Structure):
            args.append(dict_to_struct(val, t))
        else:
            args.append(val)
    return struct_class(*args)


def struct_to_dict(s):
    d = {}
    for key, t in s._fields_:
        val = getattr(s, key)
        if isinstance(val, ctypes.Structure):
            val = struct_to_dict(val)
        d[key] = val
    return d


class WGPUExtensions(ctypes.Structure):
    _fields_ = [
        ("anisotropic_filtering", ctypes.c_bool),
    ]

class WGPULimits(ctypes.Structure):
    _fields_ = [
        ("max_bind_groups", ctypes.c_uint32),
    ]

class WGPUDeviceDescriptor(ctypes.Structure):
    _fields_ = [
        ("extensions", WGPUExtensions),
        ("limits", WGPULimits),
    ]

class WGPUComputePassDescriptor(ctypes.Structure):
    _fields_ = [
        ("todo", ctypes.c_uint32),
    ]

class WGPUColor(ctypes.Structure):
    _fields_ = [
        ("r", ctypes.c_double),
        ("g", ctypes.c_double),
        ("b", ctypes.c_double),
        ("a", ctypes.c_double),
    ]

class WGPURenderPassColorAttachmentDescriptor(ctypes.Structure):
    _fields_ = [
        ("attachment", ctypes.c_uint64),
        ("resolve_target", ctypes.c_uint64),
        ("load_op", ctypes.c_int64),
        ("store_op", ctypes.c_int64),
        ("clear_color", WGPUColor),
    ]

class WGPURenderPassDepthStencilAttachmentDescriptor_TextureViewId(ctypes.Structure):
    _fields_ = [
        ("attachment", ctypes.c_uint64),
        ("depth_load_op", ctypes.c_int64),
        ("depth_store_op", ctypes.c_int64),
        ("clear_depth", ctypes.c_float),
        ("stencil_load_op", ctypes.c_int64),
        ("stencil_store_op", ctypes.c_int64),
        ("clear_stencil", ctypes.c_uint32),
    ]

class WGPURenderPassDescriptor(ctypes.Structure):
    _fields_ = [
        ("color_attachments", WGPURenderPassColorAttachmentDescriptor),
        ("color_attachments_length", ctypes.POINTER(ctypes.c_uint64)),
        ("depth_stencil_attachment", WGPURenderPassDepthStencilAttachmentDescriptor_TextureViewId),
    ]

class WGPUBufferCopyView(ctypes.Structure):
    _fields_ = [
        ("buffer", ctypes.c_uint64),
        ("offset", ctypes.c_uint64),
        ("row_pitch", ctypes.c_uint32),
        ("image_height", ctypes.c_uint32),
    ]

class WGPUOrigin3d(ctypes.Structure):
    _fields_ = [
        ("x", ctypes.c_float),
        ("y", ctypes.c_float),
        ("z", ctypes.c_float),
    ]

class WGPUTextureCopyView(ctypes.Structure):
    _fields_ = [
        ("texture", ctypes.c_uint64),
        ("mip_level", ctypes.c_uint32),
        ("array_layer", ctypes.c_uint32),
        ("origin", WGPUOrigin3d),
    ]

class WGPUExtent3d(ctypes.Structure):
    _fields_ = [
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("depth", ctypes.c_uint32),
    ]

class WGPUCommandBufferDescriptor(ctypes.Structure):
    _fields_ = [
        ("todo", ctypes.c_uint32),
    ]

class WGPUBufferBinding(ctypes.Structure):
    _fields_ = [
        ("buffer", ctypes.c_uint64),
        ("offset", ctypes.c_uint64),
        ("size", ctypes.c_uint64),
    ]

class WGPUBindingResource_WGPUBuffer_Body(ctypes.Structure):
    _fields_ = [
        ("_0", WGPUBufferBinding),
    ]

class WGPUBindingResource_WGPUSampler_Body(ctypes.Structure):
    _fields_ = [
        ("_0", ctypes.c_uint64),
    ]

class WGPUBindingResource_WGPUTextureView_Body(ctypes.Structure):
    _fields_ = [
        ("_0", ctypes.c_uint64),
    ]

class WGPUBindingResource(ctypes.Structure):
    _fields_ = [
        ("tag", ctypes.c_int64),
        ("buffer", WGPUBindingResource_WGPUBuffer_Body),
        ("sampler", WGPUBindingResource_WGPUSampler_Body),
        ("texture_view", WGPUBindingResource_WGPUTextureView_Body),
    ]

class WGPUBindGroupBinding(ctypes.Structure):
    _fields_ = [
        ("binding", ctypes.c_uint32),
        ("resource", WGPUBindingResource),
    ]

class WGPUBindGroupDescriptor(ctypes.Structure):
    _fields_ = [
        ("layout", ctypes.c_uint64),
        ("bindings", WGPUBindGroupBinding),
        ("bindings_length", ctypes.POINTER(ctypes.c_uint64)),
    ]

class WGPUBindGroupLayoutBinding(ctypes.Structure):
    _fields_ = [
        ("binding", ctypes.c_uint32),
        ("visibility", ctypes.c_uint32),
        ("ty", ctypes.c_int64),
        ("texture_dimension", ctypes.c_int64),
        ("multisampled", ctypes.c_bool),
        ("dynamic", ctypes.c_bool),
    ]

class WGPUBindGroupLayoutDescriptor(ctypes.Structure):
    _fields_ = [
        ("bindings", WGPUBindGroupLayoutBinding),
        ("bindings_length", ctypes.POINTER(ctypes.c_uint64)),
    ]

class WGPUBufferDescriptor(ctypes.Structure):
    _fields_ = [
        ("size", ctypes.c_uint64),
        ("usage", ctypes.c_uint32),
    ]

class WGPUCommandEncoderDescriptor(ctypes.Structure):
    _fields_ = [
        ("todo", ctypes.c_uint32),
    ]

class WGPUProgrammableStageDescriptor(ctypes.Structure):
    _fields_ = [
        ("module", ctypes.c_uint64),
        ("entry_point", ctypes.c_char_p),
    ]

class WGPUComputePipelineDescriptor(ctypes.Structure):
    _fields_ = [
        ("layout", ctypes.c_uint64),
        ("compute_stage", WGPUProgrammableStageDescriptor),
    ]

class WGPUPipelineLayoutDescriptor(ctypes.Structure):
    _fields_ = [
        ("bind_group_layouts", ctypes.c_uint64),
        ("bind_group_layouts_length", ctypes.POINTER(ctypes.c_uint64)),
    ]

class WGPURasterizationStateDescriptor(ctypes.Structure):
    _fields_ = [
        ("front_face", ctypes.c_int64),
        ("cull_mode", ctypes.c_int64),
        ("depth_bias", ctypes.c_int32),
        ("depth_bias_slope_scale", ctypes.c_float),
        ("depth_bias_clamp", ctypes.c_float),
    ]

class WGPUBlendDescriptor(ctypes.Structure):
    _fields_ = [
        ("src_factor", ctypes.c_int64),
        ("dst_factor", ctypes.c_int64),
        ("operation", ctypes.c_int64),
    ]

class WGPUColorStateDescriptor(ctypes.Structure):
    _fields_ = [
        ("format", ctypes.c_int64),
        ("alpha_blend", WGPUBlendDescriptor),
        ("color_blend", WGPUBlendDescriptor),
        ("write_mask", ctypes.c_uint32),
    ]

class WGPUStencilStateFaceDescriptor(ctypes.Structure):
    _fields_ = [
        ("compare", ctypes.c_int64),
        ("fail_op", ctypes.c_int64),
        ("depth_fail_op", ctypes.c_int64),
        ("pass_op", ctypes.c_int64),
    ]

class WGPUDepthStencilStateDescriptor(ctypes.Structure):
    _fields_ = [
        ("format", ctypes.c_int64),
        ("depth_write_enabled", ctypes.c_bool),
        ("depth_compare", ctypes.c_int64),
        ("stencil_front", WGPUStencilStateFaceDescriptor),
        ("stencil_back", WGPUStencilStateFaceDescriptor),
        ("stencil_read_mask", ctypes.c_uint32),
        ("stencil_write_mask", ctypes.c_uint32),
    ]

class WGPUVertexAttributeDescriptor(ctypes.Structure):
    _fields_ = [
        ("offset", ctypes.c_uint64),
        ("format", ctypes.c_int64),
        ("shader_location", ctypes.c_uint32),
    ]

class WGPUVertexBufferDescriptor(ctypes.Structure):
    _fields_ = [
        ("stride", ctypes.c_uint64),
        ("step_mode", ctypes.c_int64),
        ("attributes", WGPUVertexAttributeDescriptor),
        ("attributes_length", ctypes.POINTER(ctypes.c_uint64)),
    ]

class WGPUVertexInputDescriptor(ctypes.Structure):
    _fields_ = [
        ("index_format", ctypes.c_int64),
        ("vertex_buffers", WGPUVertexBufferDescriptor),
        ("vertex_buffers_length", ctypes.POINTER(ctypes.c_uint64)),
    ]

class WGPURenderPipelineDescriptor(ctypes.Structure):
    _fields_ = [
        ("layout", ctypes.c_uint64),
        ("vertex_stage", WGPUProgrammableStageDescriptor),
        ("fragment_stage", WGPUProgrammableStageDescriptor),
        ("primitive_topology", ctypes.c_int64),
        ("rasterization_state", WGPURasterizationStateDescriptor),
        ("color_states", WGPUColorStateDescriptor),
        ("color_states_length", ctypes.POINTER(ctypes.c_uint64)),
        ("depth_stencil_state", WGPUDepthStencilStateDescriptor),
        ("vertex_input", WGPUVertexInputDescriptor),
        ("sample_count", ctypes.c_uint32),
        ("sample_mask", ctypes.c_uint32),
        ("alpha_to_coverage_enabled", ctypes.c_bool),
    ]

class WGPUSamplerDescriptor(ctypes.Structure):
    _fields_ = [
        ("address_mode_u", ctypes.c_int64),
        ("address_mode_v", ctypes.c_int64),
        ("address_mode_w", ctypes.c_int64),
        ("mag_filter", ctypes.c_int64),
        ("min_filter", ctypes.c_int64),
        ("mipmap_filter", ctypes.c_int64),
        ("lod_min_clamp", ctypes.c_float),
        ("lod_max_clamp", ctypes.c_float),
        ("compare_function", ctypes.c_int64),
    ]

class WGPUU32Array(ctypes.Structure):
    _fields_ = [
        ("bytes", ctypes.c_uint32),
        ("length", ctypes.POINTER(ctypes.c_uint64)),
    ]

class WGPUShaderModuleDescriptor(ctypes.Structure):
    _fields_ = [
        ("code", WGPUU32Array),
    ]

class WGPUSwapChainDescriptor(ctypes.Structure):
    _fields_ = [
        ("usage", ctypes.c_uint32),
        ("format", ctypes.c_int64),
        ("width", ctypes.c_uint32),
        ("height", ctypes.c_uint32),
        ("present_mode", ctypes.c_int64),
    ]

class WGPUTextureDescriptor(ctypes.Structure):
    _fields_ = [
        ("size", WGPUExtent3d),
        ("array_layer_count", ctypes.c_uint32),
        ("mip_level_count", ctypes.c_uint32),
        ("sample_count", ctypes.c_uint32),
        ("dimension", ctypes.c_int64),
        ("format", ctypes.c_int64),
        ("usage", ctypes.c_uint32),
    ]

class WGPURequestAdapterOptions(ctypes.Structure):
    _fields_ = [
        ("power_preference", ctypes.c_int64),
    ]

class WGPUSwapChainOutput(ctypes.Structure):
    _fields_ = [
        ("view_id", ctypes.c_uint64),
    ]

class WGPUTextureViewDescriptor(ctypes.Structure):
    _fields_ = [
        ("format", ctypes.c_int64),
        ("dimension", ctypes.c_int64),
        ("aspect", ctypes.c_int64),
        ("base_mip_level", ctypes.c_uint32),
        ("level_count", ctypes.c_uint32),
        ("base_array_layer", ctypes.c_uint32),
        ("array_layer_count", ctypes.c_uint32),
    ]


_lib.wgpu_adapter_request_device.argtypes = (ctypes.c_uint64, WGPUDeviceDescriptor, )
_lib.wgpu_adapter_request_device.restype = ctypes.c_uint64
_lib.wgpu_bind_group_destroy.argtypes = (ctypes.c_uint64, )
_lib.wgpu_buffer_destroy.argtypes = (ctypes.c_uint64, )
_lib.wgpu_buffer_map_read_async.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_void_p, ctypes.c_uint8, )
_lib.wgpu_buffer_map_write_async.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_void_p, ctypes.c_uint8, )
_lib.wgpu_buffer_unmap.argtypes = (ctypes.c_uint64, )
_lib.wgpu_command_encoder_begin_compute_pass.argtypes = (ctypes.c_uint64, WGPUComputePassDescriptor, )
_lib.wgpu_command_encoder_begin_compute_pass.restype = ctypes.c_uint64
_lib.wgpu_command_encoder_begin_render_pass.argtypes = (ctypes.c_uint64, WGPURenderPassDescriptor, )
_lib.wgpu_command_encoder_begin_render_pass.restype = ctypes.c_uint64
_lib.wgpu_command_encoder_copy_buffer_to_buffer.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, )
_lib.wgpu_command_encoder_copy_buffer_to_texture.argtypes = (ctypes.c_uint64, WGPUBufferCopyView, WGPUTextureCopyView, WGPUExtent3d, )
_lib.wgpu_command_encoder_copy_texture_to_buffer.argtypes = (ctypes.c_uint64, WGPUTextureCopyView, WGPUBufferCopyView, WGPUExtent3d, )
_lib.wgpu_command_encoder_copy_texture_to_texture.argtypes = (ctypes.c_uint64, WGPUTextureCopyView, WGPUTextureCopyView, WGPUExtent3d, )
_lib.wgpu_command_encoder_finish.argtypes = (ctypes.c_uint64, WGPUCommandBufferDescriptor, )
_lib.wgpu_command_encoder_finish.restype = ctypes.c_uint64
_lib.wgpu_compute_pass_dispatch.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, )
_lib.wgpu_compute_pass_dispatch_indirect.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, )
_lib.wgpu_compute_pass_end_pass.argtypes = (ctypes.c_uint64, )
_lib.wgpu_compute_pass_insert_debug_marker.argtypes = (ctypes.c_uint64, ctypes.c_char_p, )
_lib.wgpu_compute_pass_pop_debug_group.argtypes = (ctypes.c_uint64, )
_lib.wgpu_compute_pass_push_debug_group.argtypes = (ctypes.c_uint64, ctypes.c_char_p, )
_lib.wgpu_compute_pass_set_bind_group.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), )
_lib.wgpu_compute_pass_set_pipeline.argtypes = (ctypes.c_uint64, ctypes.c_uint64, )
try:  # OS-specific
    _lib.wgpu_create_surface_from_metal_layer.argtypes = (ctypes.c_void_p, )
    _lib.wgpu_create_surface_from_metal_layer.restype = ctypes.c_uint64
except AttributeError:
    pass
try:  # OS-specific
    _lib.wgpu_create_surface_from_windows_hwnd.argtypes = (ctypes.c_void_p, ctypes.c_void_p, )
    _lib.wgpu_create_surface_from_windows_hwnd.restype = ctypes.c_uint64
except AttributeError:
    pass
try:  # OS-specific
    _lib.wgpu_create_surface_from_xlib.argtypes = (ctypes.c_void_p, ctypes.c_uint64, )
    _lib.wgpu_create_surface_from_xlib.restype = ctypes.c_uint64
except AttributeError:
    pass
_lib.wgpu_device_create_bind_group.argtypes = (ctypes.c_uint64, WGPUBindGroupDescriptor, )
_lib.wgpu_device_create_bind_group.restype = ctypes.c_uint64
_lib.wgpu_device_create_bind_group_layout.argtypes = (ctypes.c_uint64, WGPUBindGroupLayoutDescriptor, )
_lib.wgpu_device_create_bind_group_layout.restype = ctypes.c_uint64
_lib.wgpu_device_create_buffer.argtypes = (ctypes.c_uint64, WGPUBufferDescriptor, )
_lib.wgpu_device_create_buffer.restype = ctypes.c_uint64
_lib.wgpu_device_create_buffer_mapped.argtypes = (ctypes.c_uint64, WGPUBufferDescriptor, ctypes.c_uint8, )
_lib.wgpu_device_create_buffer_mapped.restype = ctypes.c_uint64
_lib.wgpu_device_create_command_encoder.argtypes = (ctypes.c_uint64, WGPUCommandEncoderDescriptor, )
_lib.wgpu_device_create_command_encoder.restype = ctypes.c_uint64
_lib.wgpu_device_create_compute_pipeline.argtypes = (ctypes.c_uint64, WGPUComputePipelineDescriptor, )
_lib.wgpu_device_create_compute_pipeline.restype = ctypes.c_uint64
_lib.wgpu_device_create_pipeline_layout.argtypes = (ctypes.c_uint64, WGPUPipelineLayoutDescriptor, )
_lib.wgpu_device_create_pipeline_layout.restype = ctypes.c_uint64
_lib.wgpu_device_create_render_pipeline.argtypes = (ctypes.c_uint64, WGPURenderPipelineDescriptor, )
_lib.wgpu_device_create_render_pipeline.restype = ctypes.c_uint64
_lib.wgpu_device_create_sampler.argtypes = (ctypes.c_uint64, WGPUSamplerDescriptor, )
_lib.wgpu_device_create_sampler.restype = ctypes.c_uint64
_lib.wgpu_device_create_shader_module.argtypes = (ctypes.c_uint64, WGPUShaderModuleDescriptor, )
_lib.wgpu_device_create_shader_module.restype = ctypes.c_uint64
_lib.wgpu_device_create_swap_chain.argtypes = (ctypes.c_uint64, ctypes.c_uint64, WGPUSwapChainDescriptor, )
_lib.wgpu_device_create_swap_chain.restype = ctypes.c_uint64
_lib.wgpu_device_create_texture.argtypes = (ctypes.c_uint64, WGPUTextureDescriptor, )
_lib.wgpu_device_create_texture.restype = ctypes.c_uint64
_lib.wgpu_device_destroy.argtypes = (ctypes.c_uint64, )
_lib.wgpu_device_get_limits.argtypes = (ctypes.c_uint64, WGPULimits, )
_lib.wgpu_device_get_queue.argtypes = (ctypes.c_uint64, )
_lib.wgpu_device_get_queue.restype = ctypes.c_uint64
_lib.wgpu_device_poll.argtypes = (ctypes.c_uint64, ctypes.c_bool, )
_lib.wgpu_queue_submit.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), )
_lib.wgpu_render_pass_draw.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, )
_lib.wgpu_render_pass_draw_indexed.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_int32, ctypes.c_uint32, )
_lib.wgpu_render_pass_draw_indexed_indirect.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, )
_lib.wgpu_render_pass_draw_indirect.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, )
_lib.wgpu_render_pass_end_pass.argtypes = (ctypes.c_uint64, )
_lib.wgpu_render_pass_execute_bundles.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), )
_lib.wgpu_render_pass_insert_debug_marker.argtypes = (ctypes.c_uint64, ctypes.c_char_p, )
_lib.wgpu_render_pass_pop_debug_group.argtypes = (ctypes.c_uint64, )
_lib.wgpu_render_pass_push_debug_group.argtypes = (ctypes.c_uint64, ctypes.c_char_p, )
_lib.wgpu_render_pass_set_bind_group.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), )
_lib.wgpu_render_pass_set_blend_color.argtypes = (ctypes.c_uint64, WGPUColor, )
_lib.wgpu_render_pass_set_index_buffer.argtypes = (ctypes.c_uint64, ctypes.c_uint64, ctypes.c_uint64, )
_lib.wgpu_render_pass_set_pipeline.argtypes = (ctypes.c_uint64, ctypes.c_uint64, )
_lib.wgpu_render_pass_set_scissor_rect.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, ctypes.c_uint32, )
_lib.wgpu_render_pass_set_stencil_reference.argtypes = (ctypes.c_uint64, ctypes.c_uint32, )
_lib.wgpu_render_pass_set_vertex_buffers.argtypes = (ctypes.c_uint64, ctypes.c_uint32, ctypes.c_uint64, ctypes.c_uint64, ctypes.POINTER(ctypes.c_uint64), )
_lib.wgpu_render_pass_set_viewport.argtypes = (ctypes.c_uint64, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float, )
_lib.wgpu_request_adapter_async.argtypes = (WGPURequestAdapterOptions, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p, )
_lib.wgpu_sampler_destroy.argtypes = (ctypes.c_uint64, )
_lib.wgpu_swap_chain_get_next_texture.argtypes = (ctypes.c_uint64, )
_lib.wgpu_swap_chain_get_next_texture.restype = WGPUSwapChainOutput
_lib.wgpu_swap_chain_present.argtypes = (ctypes.c_uint64, )
_lib.wgpu_texture_create_view.argtypes = (ctypes.c_uint64, WGPUTextureViewDescriptor, )
_lib.wgpu_texture_create_view.restype = ctypes.c_uint64
_lib.wgpu_texture_destroy.argtypes = (ctypes.c_uint64, )
_lib.wgpu_texture_view_destroy.argtypes = (ctypes.c_uint64, )


class RsWGPU(BaseWGPU):
    """ WebGPU API implemented using the C-API dll of wgpu-rs.
    """

    def adapter_request_device(self, adapter_id: int, desc: 'DeviceDescriptor'):
        """
        WGPUDeviceId wgpu_adapter_request_device(WGPUAdapterId adapter_id,
                                                 const WGPUDeviceDescriptor *desc);
        """
        return _lib.wgpu_adapter_request_device(adapter_id, dict_to_struct(desc, WGPUDeviceDescriptor))

    def bind_group_destroy(self, bind_group_id: int):
        """
        void wgpu_bind_group_destroy(WGPUBindGroupId bind_group_id);
        """
        return _lib.wgpu_bind_group_destroy(bind_group_id)

    def buffer_destroy(self, buffer_id: int):
        """
        void wgpu_buffer_destroy(WGPUBufferId buffer_id);
        """
        return _lib.wgpu_buffer_destroy(buffer_id)

    def buffer_map_read_async(self, buffer_id: int, start: int, size: int, callback: 'BufferMapReadCallback', userdata: 'uint8'):
        """
        void wgpu_buffer_map_read_async(WGPUBufferId buffer_id,
                                        WGPUBufferAddress start,
                                        WGPUBufferAddress size,
                                        WGPUBufferMapReadCallback callback,
                                        uint8_t *userdata);
        """
        return _lib.wgpu_buffer_map_read_async(buffer_id, start, size, callback, userdata)

    def buffer_map_write_async(self, buffer_id: int, start: int, size: int, callback: 'BufferMapWriteCallback', userdata: 'uint8'):
        """
        void wgpu_buffer_map_write_async(WGPUBufferId buffer_id,
                                         WGPUBufferAddress start,
                                         WGPUBufferAddress size,
                                         WGPUBufferMapWriteCallback callback,
                                         uint8_t *userdata);
        """
        return _lib.wgpu_buffer_map_write_async(buffer_id, start, size, callback, userdata)

    def buffer_unmap(self, buffer_id: int):
        """
        void wgpu_buffer_unmap(WGPUBufferId buffer_id);
        """
        return _lib.wgpu_buffer_unmap(buffer_id)

    def command_encoder_begin_compute_pass(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'ComputePassDescriptor'):
        """
        WGPUComputePassId wgpu_command_encoder_begin_compute_pass(WGPUCommandEncoderId encoder_id,
                                                                  const WGPUComputePassDescriptor *desc);
        """
        return _lib.wgpu_command_encoder_begin_compute_pass(encoder_id, dict_to_struct(desc, WGPUComputePassDescriptor))

    def command_encoder_begin_render_pass(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'RenderPassDescriptor'):
        """
        WGPURenderPassId wgpu_command_encoder_begin_render_pass(WGPUCommandEncoderId encoder_id,
                                                                const WGPURenderPassDescriptor *desc);
        """
        return _lib.wgpu_command_encoder_begin_render_pass(encoder_id, dict_to_struct(desc, WGPURenderPassDescriptor))

    def command_encoder_copy_buffer_to_buffer(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: int, source_offset: int, destination: int, destination_offset: int, size: int):
        """
        void wgpu_command_encoder_copy_buffer_to_buffer(WGPUCommandEncoderId command_encoder_id,
                                                        WGPUBufferId source,
                                                        WGPUBufferAddress source_offset,
                                                        WGPUBufferId destination,
                                                        WGPUBufferAddress destination_offset,
                                                        WGPUBufferAddress size);
        """
        return _lib.wgpu_command_encoder_copy_buffer_to_buffer(command_encoder_id, source, source_offset, destination, destination_offset, size)

    def command_encoder_copy_buffer_to_texture(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'BufferCopyView', destination: 'TextureCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_buffer_to_texture(WGPUCommandEncoderId command_encoder_id,
                                                         const WGPUBufferCopyView *source,
                                                         const WGPUTextureCopyView *destination,
                                                         WGPUExtent3d copy_size);
        """
        return _lib.wgpu_command_encoder_copy_buffer_to_texture(command_encoder_id, dict_to_struct(source, WGPUBufferCopyView), dict_to_struct(destination, WGPUTextureCopyView), dict_to_struct(copy_size, WGPUExtent3d))

    def command_encoder_copy_texture_to_buffer(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'TextureCopyView', destination: 'BufferCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_texture_to_buffer(WGPUCommandEncoderId command_encoder_id,
                                                         const WGPUTextureCopyView *source,
                                                         const WGPUBufferCopyView *destination,
                                                         WGPUExtent3d copy_size);
        """
        return _lib.wgpu_command_encoder_copy_texture_to_buffer(command_encoder_id, dict_to_struct(source, WGPUTextureCopyView), dict_to_struct(destination, WGPUBufferCopyView), dict_to_struct(copy_size, WGPUExtent3d))

    def command_encoder_copy_texture_to_texture(self, command_encoder_id: 'Id_CommandBuffer_Dummy', source: 'TextureCopyView', destination: 'TextureCopyView', copy_size: 'Extent3d'):
        """
        void wgpu_command_encoder_copy_texture_to_texture(WGPUCommandEncoderId command_encoder_id,
                                                          const WGPUTextureCopyView *source,
                                                          const WGPUTextureCopyView *destination,
                                                          WGPUExtent3d copy_size);
        """
        return _lib.wgpu_command_encoder_copy_texture_to_texture(command_encoder_id, dict_to_struct(source, WGPUTextureCopyView), dict_to_struct(destination, WGPUTextureCopyView), dict_to_struct(copy_size, WGPUExtent3d))

    def command_encoder_finish(self, encoder_id: 'Id_CommandBuffer_Dummy', desc: 'CommandBufferDescriptor'):
        """
        WGPUCommandBufferId wgpu_command_encoder_finish(WGPUCommandEncoderId encoder_id,
                                                        const WGPUCommandBufferDescriptor *desc);
        """
        return _lib.wgpu_command_encoder_finish(encoder_id, dict_to_struct(desc, WGPUCommandBufferDescriptor))

    def compute_pass_dispatch(self, pass_id: int, x: int, y: int, z: int):
        """
        void wgpu_compute_pass_dispatch(WGPUComputePassId pass_id, uint32_t x, uint32_t y, uint32_t z);
        """
        return _lib.wgpu_compute_pass_dispatch(pass_id, x, y, z)

    def compute_pass_dispatch_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_compute_pass_dispatch_indirect(WGPUComputePassId pass_id,
                                                 WGPUBufferId indirect_buffer_id,
                                                 WGPUBufferAddress indirect_offset);
        """
        return _lib.wgpu_compute_pass_dispatch_indirect(pass_id, indirect_buffer_id, indirect_offset)

    def compute_pass_end_pass(self, pass_id: int):
        """
        void wgpu_compute_pass_end_pass(WGPUComputePassId pass_id);
        """
        return _lib.wgpu_compute_pass_end_pass(pass_id)

    def compute_pass_insert_debug_marker(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_compute_pass_insert_debug_marker(WGPUComputePassId _pass_id, WGPURawString _label);
        """
        return _lib.wgpu_compute_pass_insert_debug_marker(_pass_id, _label)

    def compute_pass_pop_debug_group(self, _pass_id: int):
        """
        void wgpu_compute_pass_pop_debug_group(WGPUComputePassId _pass_id);
        """
        return _lib.wgpu_compute_pass_pop_debug_group(_pass_id)

    def compute_pass_push_debug_group(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_compute_pass_push_debug_group(WGPUComputePassId _pass_id, WGPURawString _label);
        """
        return _lib.wgpu_compute_pass_push_debug_group(_pass_id, _label)

    def compute_pass_set_bind_group(self, pass_id: int, index: int, bind_group_id: int, offsets: int, offsets_length: 'uintptr'):
        """
        void wgpu_compute_pass_set_bind_group(WGPUComputePassId pass_id,
                                              uint32_t index,
                                              WGPUBindGroupId bind_group_id,
                                              const WGPUBufferAddress *offsets,
                                              uintptr_t offsets_length);
        """
        return _lib.wgpu_compute_pass_set_bind_group(pass_id, index, bind_group_id, offsets, offsets_length)

    def compute_pass_set_pipeline(self, pass_id: int, pipeline_id: int):
        """
        void wgpu_compute_pass_set_pipeline(WGPUComputePassId pass_id, WGPUComputePipelineId pipeline_id);
        """
        return _lib.wgpu_compute_pass_set_pipeline(pass_id, pipeline_id)

    def create_surface_from_metal_layer(self, layer):
        """
        WGPUSurfaceId wgpu_create_surface_from_metal_layer(void *layer);
        """
        return _lib.wgpu_create_surface_from_metal_layer(layer)

    def create_surface_from_windows_hwnd(self, _hinstance, hwnd):
        """
        WGPUSurfaceId wgpu_create_surface_from_windows_hwnd(void *_hinstance, void *hwnd);
        """
        return _lib.wgpu_create_surface_from_windows_hwnd(_hinstance, hwnd)

    def create_surface_from_xlib(self, display, window: int):
        """
        WGPUSurfaceId wgpu_create_surface_from_xlib(const void **display, uint64_t window);
        """
        return _lib.wgpu_create_surface_from_xlib(display, window)

    def device_create_bind_group(self, device_id: int, desc: 'BindGroupDescriptor'):
        """
        WGPUBindGroupId wgpu_device_create_bind_group(WGPUDeviceId device_id,
                                                      const WGPUBindGroupDescriptor *desc);
        """
        return _lib.wgpu_device_create_bind_group(device_id, dict_to_struct(desc, WGPUBindGroupDescriptor))

    def device_create_bind_group_layout(self, device_id: int, desc: 'BindGroupLayoutDescriptor'):
        """
        WGPUBindGroupLayoutId wgpu_device_create_bind_group_layout(WGPUDeviceId device_id,
                                                                   const WGPUBindGroupLayoutDescriptor *desc);
        """
        return _lib.wgpu_device_create_bind_group_layout(device_id, dict_to_struct(desc, WGPUBindGroupLayoutDescriptor))

    def device_create_buffer(self, device_id: int, desc: 'BufferDescriptor'):
        """
        WGPUBufferId wgpu_device_create_buffer(WGPUDeviceId device_id, const WGPUBufferDescriptor *desc);
        """
        return _lib.wgpu_device_create_buffer(device_id, dict_to_struct(desc, WGPUBufferDescriptor))

    def device_create_buffer_mapped(self, device_id: int, desc: 'BufferDescriptor', mapped_ptr_out: 'uint8'):
        """
        WGPUBufferId wgpu_device_create_buffer_mapped(WGPUDeviceId device_id,
                                                      const WGPUBufferDescriptor *desc,
                                                      uint8_t **mapped_ptr_out);
        """
        return _lib.wgpu_device_create_buffer_mapped(device_id, dict_to_struct(desc, WGPUBufferDescriptor), mapped_ptr_out)

    def device_create_command_encoder(self, device_id: int, desc: 'CommandEncoderDescriptor'):
        """
        WGPUCommandEncoderId wgpu_device_create_command_encoder(WGPUDeviceId device_id,
                                                                const WGPUCommandEncoderDescriptor *desc);
        """
        return _lib.wgpu_device_create_command_encoder(device_id, dict_to_struct(desc, WGPUCommandEncoderDescriptor))

    def device_create_compute_pipeline(self, device_id: int, desc: 'ComputePipelineDescriptor'):
        """
        WGPUComputePipelineId wgpu_device_create_compute_pipeline(WGPUDeviceId device_id,
                                                                  const WGPUComputePipelineDescriptor *desc);
        """
        return _lib.wgpu_device_create_compute_pipeline(device_id, dict_to_struct(desc, WGPUComputePipelineDescriptor))

    def device_create_pipeline_layout(self, device_id: int, desc: 'PipelineLayoutDescriptor'):
        """
        WGPUPipelineLayoutId wgpu_device_create_pipeline_layout(WGPUDeviceId device_id,
                                                                const WGPUPipelineLayoutDescriptor *desc);
        """
        return _lib.wgpu_device_create_pipeline_layout(device_id, dict_to_struct(desc, WGPUPipelineLayoutDescriptor))

    def device_create_render_pipeline(self, device_id: int, desc: 'RenderPipelineDescriptor'):
        """
        WGPURenderPipelineId wgpu_device_create_render_pipeline(WGPUDeviceId device_id,
                                                                const WGPURenderPipelineDescriptor *desc);
        """
        return _lib.wgpu_device_create_render_pipeline(device_id, dict_to_struct(desc, WGPURenderPipelineDescriptor))

    def device_create_sampler(self, device_id: int, desc: 'SamplerDescriptor'):
        """
        WGPUSamplerId wgpu_device_create_sampler(WGPUDeviceId device_id, const WGPUSamplerDescriptor *desc);
        """
        return _lib.wgpu_device_create_sampler(device_id, dict_to_struct(desc, WGPUSamplerDescriptor))

    def device_create_shader_module(self, device_id: int, desc: 'ShaderModuleDescriptor'):
        """
        WGPUShaderModuleId wgpu_device_create_shader_module(WGPUDeviceId device_id,
                                                            const WGPUShaderModuleDescriptor *desc);
        """
        return _lib.wgpu_device_create_shader_module(device_id, dict_to_struct(desc, WGPUShaderModuleDescriptor))

    def device_create_swap_chain(self, device_id: int, surface_id: int, desc: 'SwapChainDescriptor'):
        """
        WGPUSwapChainId wgpu_device_create_swap_chain(WGPUDeviceId device_id,
                                                      WGPUSurfaceId surface_id,
                                                      const WGPUSwapChainDescriptor *desc);
        """
        return _lib.wgpu_device_create_swap_chain(device_id, surface_id, dict_to_struct(desc, WGPUSwapChainDescriptor))

    def device_create_texture(self, device_id: int, desc: 'TextureDescriptor'):
        """
        WGPUTextureId wgpu_device_create_texture(WGPUDeviceId device_id, const WGPUTextureDescriptor *desc);
        """
        return _lib.wgpu_device_create_texture(device_id, dict_to_struct(desc, WGPUTextureDescriptor))

    def device_destroy(self, device_id: int):
        """
        void wgpu_device_destroy(WGPUDeviceId device_id);
        """
        return _lib.wgpu_device_destroy(device_id)

    def device_get_limits(self, _device_id: int, limits: 'Limits'):
        """
        void wgpu_device_get_limits(WGPUDeviceId _device_id, WGPULimits *limits);
        """
        return _lib.wgpu_device_get_limits(_device_id, dict_to_struct(limits, WGPULimits))

    def device_get_queue(self, device_id: int):
        """
        WGPUQueueId wgpu_device_get_queue(WGPUDeviceId device_id);
        """
        return _lib.wgpu_device_get_queue(device_id)

    def device_poll(self, device_id: int, force_wait: 'bool'):
        """
        void wgpu_device_poll(WGPUDeviceId device_id, bool force_wait);
        """
        return _lib.wgpu_device_poll(device_id, force_wait)

    def queue_submit(self, queue_id: 'Id_Device_Dummy', command_buffers: int, command_buffers_length: 'uintptr'):
        """
        void wgpu_queue_submit(WGPUQueueId queue_id,
                               const WGPUCommandBufferId *command_buffers,
                               uintptr_t command_buffers_length);
        """
        return _lib.wgpu_queue_submit(queue_id, command_buffers, command_buffers_length)

    def render_pass_draw(self, pass_id: int, vertex_count: int, instance_count: int, first_vertex: int, first_instance: int):
        """
        void wgpu_render_pass_draw(WGPURenderPassId pass_id,
                                   uint32_t vertex_count,
                                   uint32_t instance_count,
                                   uint32_t first_vertex,
                                   uint32_t first_instance);
        """
        return _lib.wgpu_render_pass_draw(pass_id, vertex_count, instance_count, first_vertex, first_instance)

    def render_pass_draw_indexed(self, pass_id: int, index_count: int, instance_count: int, first_index: int, base_vertex: int, first_instance: int):
        """
        void wgpu_render_pass_draw_indexed(WGPURenderPassId pass_id,
                                           uint32_t index_count,
                                           uint32_t instance_count,
                                           uint32_t first_index,
                                           int32_t base_vertex,
                                           uint32_t first_instance);
        """
        return _lib.wgpu_render_pass_draw_indexed(pass_id, index_count, instance_count, first_index, base_vertex, first_instance)

    def render_pass_draw_indexed_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_render_pass_draw_indexed_indirect(WGPURenderPassId pass_id,
                                                    WGPUBufferId indirect_buffer_id,
                                                    WGPUBufferAddress indirect_offset);
        """
        return _lib.wgpu_render_pass_draw_indexed_indirect(pass_id, indirect_buffer_id, indirect_offset)

    def render_pass_draw_indirect(self, pass_id: int, indirect_buffer_id: int, indirect_offset: int):
        """
        void wgpu_render_pass_draw_indirect(WGPURenderPassId pass_id,
                                            WGPUBufferId indirect_buffer_id,
                                            WGPUBufferAddress indirect_offset);
        """
        return _lib.wgpu_render_pass_draw_indirect(pass_id, indirect_buffer_id, indirect_offset)

    def render_pass_end_pass(self, pass_id: int):
        """
        void wgpu_render_pass_end_pass(WGPURenderPassId pass_id);
        """
        return _lib.wgpu_render_pass_end_pass(pass_id)

    def render_pass_execute_bundles(self, _pass_id: int, _bundles: int, _bundles_length: 'uintptr'):
        """
        void wgpu_render_pass_execute_bundles(WGPURenderPassId _pass_id,
                                              const WGPURenderBundleId *_bundles,
                                              uintptr_t _bundles_length);
        """
        return _lib.wgpu_render_pass_execute_bundles(_pass_id, _bundles, _bundles_length)

    def render_pass_insert_debug_marker(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_render_pass_insert_debug_marker(WGPURenderPassId _pass_id, WGPURawString _label);
        """
        return _lib.wgpu_render_pass_insert_debug_marker(_pass_id, _label)

    def render_pass_pop_debug_group(self, _pass_id: int):
        """
        void wgpu_render_pass_pop_debug_group(WGPURenderPassId _pass_id);
        """
        return _lib.wgpu_render_pass_pop_debug_group(_pass_id)

    def render_pass_push_debug_group(self, _pass_id: int, _label: 'RawString'):
        """
        void wgpu_render_pass_push_debug_group(WGPURenderPassId _pass_id, WGPURawString _label);
        """
        return _lib.wgpu_render_pass_push_debug_group(_pass_id, _label)

    def render_pass_set_bind_group(self, pass_id: int, index: int, bind_group_id: int, offsets: int, offsets_length: 'uintptr'):
        """
        void wgpu_render_pass_set_bind_group(WGPURenderPassId pass_id,
                                             uint32_t index,
                                             WGPUBindGroupId bind_group_id,
                                             const WGPUBufferAddress *offsets,
                                             uintptr_t offsets_length);
        """
        return _lib.wgpu_render_pass_set_bind_group(pass_id, index, bind_group_id, offsets, offsets_length)

    def render_pass_set_blend_color(self, pass_id: int, color: 'Color'):
        """
        void wgpu_render_pass_set_blend_color(WGPURenderPassId pass_id, const WGPUColor *color);
        """
        return _lib.wgpu_render_pass_set_blend_color(pass_id, dict_to_struct(color, WGPUColor))

    def render_pass_set_index_buffer(self, pass_id: int, buffer_id: int, offset: int):
        """
        void wgpu_render_pass_set_index_buffer(WGPURenderPassId pass_id,
                                               WGPUBufferId buffer_id,
                                               WGPUBufferAddress offset);
        """
        return _lib.wgpu_render_pass_set_index_buffer(pass_id, buffer_id, offset)

    def render_pass_set_pipeline(self, pass_id: int, pipeline_id: int):
        """
        void wgpu_render_pass_set_pipeline(WGPURenderPassId pass_id, WGPURenderPipelineId pipeline_id);
        """
        return _lib.wgpu_render_pass_set_pipeline(pass_id, pipeline_id)

    def render_pass_set_scissor_rect(self, pass_id: int, x: int, y: int, w: int, h: int):
        """
        void wgpu_render_pass_set_scissor_rect(WGPURenderPassId pass_id,
                                               uint32_t x,
                                               uint32_t y,
                                               uint32_t w,
                                               uint32_t h);
        """
        return _lib.wgpu_render_pass_set_scissor_rect(pass_id, x, y, w, h)

    def render_pass_set_stencil_reference(self, pass_id: int, value: int):
        """
        void wgpu_render_pass_set_stencil_reference(WGPURenderPassId pass_id, uint32_t value);
        """
        return _lib.wgpu_render_pass_set_stencil_reference(pass_id, value)

    def render_pass_set_vertex_buffers(self, pass_id: int, start_slot: int, buffers: int, offsets: int, length: 'uintptr'):
        """
        void wgpu_render_pass_set_vertex_buffers(WGPURenderPassId pass_id,
                                                 uint32_t start_slot,
                                                 const WGPUBufferId *buffers,
                                                 const WGPUBufferAddress *offsets,
                                                 uintptr_t length);
        """
        return _lib.wgpu_render_pass_set_vertex_buffers(pass_id, start_slot, buffers, offsets, length)

    def render_pass_set_viewport(self, pass_id: int, x: float, y: float, w: float, h: float, min_depth: float, max_depth: float):
        """
        void wgpu_render_pass_set_viewport(WGPURenderPassId pass_id,
                                           float x,
                                           float y,
                                           float w,
                                           float h,
                                           float min_depth,
                                           float max_depth);
        """
        return _lib.wgpu_render_pass_set_viewport(pass_id, x, y, w, h, min_depth, max_depth)

    def request_adapter_async(self, desc: 'RequestAdapterOptions', mask: int, callback: 'RequestAdapterCallback', userdata):
        """
        void wgpu_request_adapter_async(const WGPURequestAdapterOptions *desc,
                                        WGPUBackendBit mask,
                                        WGPURequestAdapterCallback callback,
                                        void *userdata);
        """
        return _lib.wgpu_request_adapter_async(dict_to_struct(desc, WGPURequestAdapterOptions), mask, callback, userdata)

    def sampler_destroy(self, sampler_id: int):
        """
        void wgpu_sampler_destroy(WGPUSamplerId sampler_id);
        """
        return _lib.wgpu_sampler_destroy(sampler_id)

    def swap_chain_get_next_texture(self, swap_chain_id: int):
        """
        WGPUSwapChainOutput wgpu_swap_chain_get_next_texture(WGPUSwapChainId swap_chain_id);
        """
        return _lib.wgpu_swap_chain_get_next_texture(swap_chain_id)

    def swap_chain_present(self, swap_chain_id: int):
        """
        void wgpu_swap_chain_present(WGPUSwapChainId swap_chain_id);
        """
        return _lib.wgpu_swap_chain_present(swap_chain_id)

    def texture_create_view(self, texture_id: int, desc: 'TextureViewDescriptor'):
        """
        WGPUTextureViewId wgpu_texture_create_view(WGPUTextureId texture_id,
                                                   const WGPUTextureViewDescriptor *desc);
        """
        return _lib.wgpu_texture_create_view(texture_id, dict_to_struct(desc, WGPUTextureViewDescriptor))

    def texture_destroy(self, texture_id: int):
        """
        void wgpu_texture_destroy(WGPUTextureId texture_id);
        """
        return _lib.wgpu_texture_destroy(texture_id)

    def texture_view_destroy(self, texture_view_id: int):
        """
        void wgpu_texture_view_destroy(WGPUTextureViewId texture_view_id);
        """
        return _lib.wgpu_texture_view_destroy(texture_view_id)
