"""
THIS CODE IS AUTOGENERATED - DO NOT EDIT
"""

class _FlagsOrEnum:

    def __init__(self, name, **kwargs):
        self._name = name
        for key, val in kwargs.items():
            setattr(self, key, val)

    def __repr__(self):
        options = ', '.join(self)
        return f"<{self.__class__.__name__} {self._name}: {options}>"


class Flags(_FlagsOrEnum):

    def __iter__(self):
        return iter([key for key in dir(self) if not key.startswith("_")])

    def __repr__(self):
        options = ', '.join(self)
        return f"<{self.__class__.__name__} {self._name}: {options}>"


class Enum(_FlagsOrEnum):

    def __iter__(self):
        return iter([getattr(self, key) for key in dir(self) if not key.startswith("_")])

    def __repr__(self):
        options = ', '.join("'{x}'" for x in self)
        return f"<{self.__class__.__name__} {self._name}: {options}>"



# %% flags (4)

BufferUsage = Flags('BufferUsage',
    MAP_READ=1,
    MAP_WRITE=2,
    COPY_SRC=4,
    COPY_DST=8,
    INDEX=16,
    VERTEX=32,
    UNIFORM=64,
    STORAGE=128,
    INDIRECT=256,
)

TextureUsage = Flags('TextureUsage',
    COPY_SRC=1,
    COPY_DST=2,
    SAMPLED=4,
    STORAGE=8,
    OUTPUT_ATTACHMENT=16,
)

ShaderStage = Flags('ShaderStage',
    VERTEX=1,
    FRAGMENT=2,
    COMPUTE=4,
)

ColorWrite = Flags('ColorWrite',
    RED=1,
    GREEN=2,
    BLUE=4,
    ALPHA=8,
    ALL=15,
)


# %% Enums (22)

PowerPreference = Enum('PowerPreference',
    low_power='low-power',
    high_performance='high-performance',
)

TextureDimension = Enum('TextureDimension',
    d1='1d',
    d2='2d',
    d3='3d',
)

TextureViewDimension = Enum('TextureViewDimension',
    d1='1d',
    d2='2d',
    d2_array='2d-array',
    cube='cube',
    cube_array='cube-array',
    d3='3d',
)

TextureAspect = Enum('TextureAspect',
    all='all',
    stencil_only='stencil-only',
    depth_only='depth-only',
)

TextureFormat = Enum('TextureFormat',
    r8unorm='r8unorm',
    r8snorm='r8snorm',
    r8uint='r8uint',
    r8sint='r8sint',
    r16uint='r16uint',
    r16sint='r16sint',
    r16float='r16float',
    rg8unorm='rg8unorm',
    rg8snorm='rg8snorm',
    rg8uint='rg8uint',
    rg8sint='rg8sint',
    r32uint='r32uint',
    r32sint='r32sint',
    r32float='r32float',
    rg16uint='rg16uint',
    rg16sint='rg16sint',
    rg16float='rg16float',
    rgba8unorm='rgba8unorm',
    rgba8unorm_srgb='rgba8unorm-srgb',
    rgba8snorm='rgba8snorm',
    rgba8uint='rgba8uint',
    rgba8sint='rgba8sint',
    bgra8unorm='bgra8unorm',
    bgra8unorm_srgb='bgra8unorm-srgb',
    rgb10a2unorm='rgb10a2unorm',
    rg11b10float='rg11b10float',
    rg32uint='rg32uint',
    rg32sint='rg32sint',
    rg32float='rg32float',
    rgba16uint='rgba16uint',
    rgba16sint='rgba16sint',
    rgba16float='rgba16float',
    rgba32uint='rgba32uint',
    rgba32sint='rgba32sint',
    rgba32float='rgba32float',
    depth32float='depth32float',
    depth24plus='depth24plus',
    depth24plus_stencil8='depth24plus-stencil8',
)

TextureComponentType = Enum('TextureComponentType',
    float='float',
    sint='sint',
    uint='uint',
)

AddressMode = Enum('AddressMode',
    clamp_to_edge='clamp-to-edge',
    repeat='repeat',
    mirror_repeat='mirror-repeat',
)

FilterMode = Enum('FilterMode',
    nearest='nearest',
    linear='linear',
)

CompareFunction = Enum('CompareFunction',
    never='never',
    less='less',
    equal='equal',
    less_equal='less-equal',
    greater='greater',
    not_equal='not-equal',
    greater_equal='greater-equal',
    always='always',
)

BindingType = Enum('BindingType',
    uniform_buffer='uniform-buffer',
    storage_buffer='storage-buffer',
    readonly_storage_buffer='readonly-storage-buffer',
    sampler='sampler',
    sampled_texture='sampled-texture',
    storage_texture='storage-texture',
)

PrimitiveTopology = Enum('PrimitiveTopology',
    point_list='point-list',
    line_list='line-list',
    line_strip='line-strip',
    triangle_list='triangle-list',
    triangle_strip='triangle-strip',
)

FrontFace = Enum('FrontFace',
    ccw='ccw',
    cw='cw',
)

CullMode = Enum('CullMode',
    none='none',
    front='front',
    back='back',
)

BlendFactor = Enum('BlendFactor',
    zero='zero',
    one='one',
    src_color='src-color',
    one_minus_src_color='one-minus-src-color',
    src_alpha='src-alpha',
    one_minus_src_alpha='one-minus-src-alpha',
    dst_color='dst-color',
    one_minus_dst_color='one-minus-dst-color',
    dst_alpha='dst-alpha',
    one_minus_dst_alpha='one-minus-dst-alpha',
    src_alpha_saturated='src-alpha-saturated',
    blend_color='blend-color',
    one_minus_blend_color='one-minus-blend-color',
)

BlendOperation = Enum('BlendOperation',
    add='add',
    subtract='subtract',
    reverse_subtract='reverse-subtract',
    min='min',
    max='max',
)

StencilOperation = Enum('StencilOperation',
    keep='keep',
    zero='zero',
    replace='replace',
    invert='invert',
    increment_clamp='increment-clamp',
    decrement_clamp='decrement-clamp',
    increment_wrap='increment-wrap',
    decrement_wrap='decrement-wrap',
)

IndexFormat = Enum('IndexFormat',
    uint16='uint16',
    uint32='uint32',
)

VertexFormat = Enum('VertexFormat',
    uchar2='uchar2',
    uchar4='uchar4',
    char2='char2',
    char4='char4',
    uchar2norm='uchar2norm',
    uchar4norm='uchar4norm',
    char2norm='char2norm',
    char4norm='char4norm',
    ushort2='ushort2',
    ushort4='ushort4',
    short2='short2',
    short4='short4',
    ushort2norm='ushort2norm',
    ushort4norm='ushort4norm',
    short2norm='short2norm',
    short4norm='short4norm',
    half2='half2',
    half4='half4',
    float='float',
    float2='float2',
    float3='float3',
    float4='float4',
    uint='uint',
    uint2='uint2',
    uint3='uint3',
    uint4='uint4',
    int='int',
    int2='int2',
    int3='int3',
    int4='int4',
)

InputStepMode = Enum('InputStepMode',
    vertex='vertex',
    instance='instance',
)

LoadOp = Enum('LoadOp',
    load='load',
)

StoreOp = Enum('StoreOp',
    store='store',
    clear='clear',
)

ErrorFilter = Enum('ErrorFilter',
    none='none',
    out_of_memory='out-of-memory',
    validation='validation',
)


# %% Structs (44)

def makeColor(*, r: float, g: float, b: float, a: float):
    return {"r": r, "g": g, "b": b, "a": a}

def makeOrigin2D(*, x: int=0, y: int=0):
    return {"x": x, "y": y}

def makeOrigin3D(*, x: int=0, y: int=0, z: int=0):
    return {"x": x, "y": y, "z": z}

def makeExtent3D(*, width: int, height: int, depth: int):
    return {"width": width, "height": height, "depth": depth}

def makeRequestAdapterOptions(*, powerPreference: 'GPUPowerPreference'):
    return {"powerPreference": powerPreference}

def makeDeviceDescriptor(*, label: str, extensions: 'GPUExtensions'={}, limits: 'GPULimits'={}):
    return {"label": label, "extensions": extensions, "limits": limits}

def makeExtensions(*, anisotropicFiltering: bool=False):
    return {"anisotropicFiltering": anisotropicFiltering}

def makeLimits(*, maxBindGroups: int=4, maxDynamicUniformBuffersPerPipelineLayout: int=8, maxDynamicStorageBuffersPerPipelineLayout: int=4, maxSampledTexturesPerShaderStage: int=16, maxSamplersPerShaderStage: int=16, maxStorageBuffersPerShaderStage: int=4, maxStorageTexturesPerShaderStage: int=4, maxUniformBuffersPerShaderStage: int=12):
    return {"maxBindGroups": maxBindGroups, "maxDynamicUniformBuffersPerPipelineLayout": maxDynamicUniformBuffersPerPipelineLayout, "maxDynamicStorageBuffersPerPipelineLayout": maxDynamicStorageBuffersPerPipelineLayout, "maxSampledTexturesPerShaderStage": maxSampledTexturesPerShaderStage, "maxSamplersPerShaderStage": maxSamplersPerShaderStage, "maxStorageBuffersPerShaderStage": maxStorageBuffersPerShaderStage, "maxStorageTexturesPerShaderStage": maxStorageTexturesPerShaderStage, "maxUniformBuffersPerShaderStage": maxUniformBuffersPerShaderStage}

def makeBufferDescriptor(*, label: str, size: 'GPUBufferSize', usage: 'GPUBufferUsageFlags'):
    return {"label": label, "size": size, "usage": usage}

def makeTextureDescriptor(*, label: str, size: 'GPUExtent3D', arrayLayerCount: int=1, mipLevelCount: int=1, sampleCount: int=1, dimension: 'GPUTextureDimension'="2d", format: 'GPUTextureFormat', usage: 'GPUTextureUsageFlags'):
    return {"label": label, "size": size, "arrayLayerCount": arrayLayerCount, "mipLevelCount": mipLevelCount, "sampleCount": sampleCount, "dimension": dimension, "format": format, "usage": usage}

def makeTextureViewDescriptor(*, label: str, format: 'GPUTextureFormat', dimension: 'GPUTextureViewDimension', aspect: 'GPUTextureAspect'="all", baseMipLevel: int=0, mipLevelCount: int=0, baseArrayLayer: int=0, arrayLayerCount: int=0):
    return {"label": label, "format": format, "dimension": dimension, "aspect": aspect, "baseMipLevel": baseMipLevel, "mipLevelCount": mipLevelCount, "baseArrayLayer": baseArrayLayer, "arrayLayerCount": arrayLayerCount}

def makeSamplerDescriptor(*, label: str, addressModeU: 'GPUAddressMode'="clamp-to-edge", addressModeV: 'GPUAddressMode'="clamp-to-edge", addressModeW: 'GPUAddressMode'="clamp-to-edge", magFilter: 'GPUFilterMode'="nearest", minFilter: 'GPUFilterMode'="nearest", mipmapFilter: 'GPUFilterMode'="nearest", lodMinClamp: float=0, lodMaxClamp: float=0xffffffff, compare: 'GPUCompareFunction'="never"):
    return {"label": label, "addressModeU": addressModeU, "addressModeV": addressModeV, "addressModeW": addressModeW, "magFilter": magFilter, "minFilter": minFilter, "mipmapFilter": mipmapFilter, "lodMinClamp": lodMinClamp, "lodMaxClamp": lodMaxClamp, "compare": compare}

def makeBindGroupLayoutDescriptor(*, label: str, bindings: 'GPUBindGroupLayoutBinding-list'):
    return {"label": label, "bindings": bindings}

def makeBindGroupLayoutBinding(*, binding: int, visibility: 'GPUShaderStageFlags', type: 'GPUBindingType', textureDimension: 'GPUTextureViewDimension'="2d", textureComponentType: 'GPUTextureComponentType'="float", multisampled: bool=False, hasDynamicOffset: bool=False):
    return {"binding": binding, "visibility": visibility, "type": type, "textureDimension": textureDimension, "textureComponentType": textureComponentType, "multisampled": multisampled, "hasDynamicOffset": hasDynamicOffset}

def makeBindGroupDescriptor(*, label: str, layout: 'GPUBindGroupLayout', bindings: 'GPUBindGroupBinding-list'):
    return {"label": label, "layout": layout, "bindings": bindings}

def makeBindGroupBinding(*, binding: int, resource: 'GPUBindingResource'):
    return {"binding": binding, "resource": resource}

def makeBufferBinding(*, buffer: 'GPUBuffer', offset: 'GPUBufferSize'=0, size: 'GPUBufferSize'):
    return {"buffer": buffer, "offset": offset, "size": size}

def makePipelineLayoutDescriptor(*, label: str, bindGroupLayouts: 'GPUBindGroupLayout-list'):
    return {"label": label, "bindGroupLayouts": bindGroupLayouts}

def makeShaderModuleDescriptor(*, label: str, code: 'GPUShaderCode'):
    return {"label": label, "code": code}

def makeProgrammableStageDescriptor(*, module: 'GPUShaderModule', entryPoint: str):
    return {"module": module, "entryPoint": entryPoint}

def makeComputePipelineDescriptor(*, label: str, layout: 'GPUPipelineLayout', computeStage: 'GPUProgrammableStageDescriptor'):
    return {"label": label, "layout": layout, "computeStage": computeStage}

def makeRenderPipelineDescriptor(*, label: str, layout: 'GPUPipelineLayout', vertexStage: 'GPUProgrammableStageDescriptor', fragmentStage: 'GPUProgrammableStageDescriptor', primitiveTopology: 'GPUPrimitiveTopology', rasterizationState: 'GPURasterizationStateDescriptor'={}, colorStates: 'GPUColorStateDescriptor-list', depthStencilState: 'GPUDepthStencilStateDescriptor', vertexState: 'GPUVertexStateDescriptor'={}, sampleCount: int=1, sampleMask: int=0xFFFFFFFF, alphaToCoverageEnabled: bool=False):
    return {"label": label, "layout": layout, "vertexStage": vertexStage, "fragmentStage": fragmentStage, "primitiveTopology": primitiveTopology, "rasterizationState": rasterizationState, "colorStates": colorStates, "depthStencilState": depthStencilState, "vertexState": vertexState, "sampleCount": sampleCount, "sampleMask": sampleMask, "alphaToCoverageEnabled": alphaToCoverageEnabled}

def makeRasterizationStateDescriptor(*, frontFace: 'GPUFrontFace'="ccw", cullMode: 'GPUCullMode'="none", depthBias: int=0, depthBiasSlopeScale: float=0, depthBiasClamp: float=0):
    return {"frontFace": frontFace, "cullMode": cullMode, "depthBias": depthBias, "depthBiasSlopeScale": depthBiasSlopeScale, "depthBiasClamp": depthBiasClamp}

def makeColorStateDescriptor(*, format: 'GPUTextureFormat', alphaBlend: 'GPUBlendDescriptor'={}, colorBlend: 'GPUBlendDescriptor'={}, writeMask: 'GPUColorWriteFlags'=0xF):
    return {"format": format, "alphaBlend": alphaBlend, "colorBlend": colorBlend, "writeMask": writeMask}

def makeBlendDescriptor(*, srcFactor: 'GPUBlendFactor'="one", dstFactor: 'GPUBlendFactor'="zero", operation: 'GPUBlendOperation'="add"):
    return {"srcFactor": srcFactor, "dstFactor": dstFactor, "operation": operation}

def makeDepthStencilStateDescriptor(*, format: 'GPUTextureFormat', depthWriteEnabled: bool=False, depthCompare: 'GPUCompareFunction'="always", stencilFront: 'GPUStencilStateFaceDescriptor'={}, stencilBack: 'GPUStencilStateFaceDescriptor'={}, stencilReadMask: int=0xFFFFFFFF, stencilWriteMask: int=0xFFFFFFFF):
    return {"format": format, "depthWriteEnabled": depthWriteEnabled, "depthCompare": depthCompare, "stencilFront": stencilFront, "stencilBack": stencilBack, "stencilReadMask": stencilReadMask, "stencilWriteMask": stencilWriteMask}

def makeStencilStateFaceDescriptor(*, compare: 'GPUCompareFunction'="always", failOp: 'GPUStencilOperation'="keep", depthFailOp: 'GPUStencilOperation'="keep", passOp: 'GPUStencilOperation'="keep"):
    return {"compare": compare, "failOp": failOp, "depthFailOp": depthFailOp, "passOp": passOp}

def makeVertexStateDescriptor(*, indexFormat: 'GPUIndexFormat'="uint32", vertexBuffers: 'GPUVertexBufferLayoutDescriptor?-list'=[]):
    return {"indexFormat": indexFormat, "vertexBuffers": vertexBuffers}

def makeVertexBufferLayoutDescriptor(*, arrayStride: 'GPUBufferSize', stepMode: 'GPUInputStepMode'="vertex", attributes: 'GPUVertexAttributeDescriptor-list'):
    return {"arrayStride": arrayStride, "stepMode": stepMode, "attributes": attributes}

def makeVertexAttributeDescriptor(*, format: 'GPUVertexFormat', offset: 'GPUBufferSize', shaderLocation: int):
    return {"format": format, "offset": offset, "shaderLocation": shaderLocation}

def makeCommandBufferDescriptor(*, label: str):
    return {"label": label}

def makeCommandEncoderDescriptor(*, label: str):
    return {"label": label}

def makeBufferCopyView(*, buffer: 'GPUBuffer', offset: 'GPUBufferSize'=0, rowPitch: int, imageHeight: int):
    return {"buffer": buffer, "offset": offset, "rowPitch": rowPitch, "imageHeight": imageHeight}

def makeTextureCopyView(*, texture: 'GPUTexture', mipLevel: int=0, arrayLayer: int=0, origin: 'GPUOrigin3D'={}):
    return {"texture": texture, "mipLevel": mipLevel, "arrayLayer": arrayLayer, "origin": origin}

def makeImageBitmapCopyView(*, imageBitmap: 'array', origin: 'GPUOrigin2D'={}):
    return {"imageBitmap": imageBitmap, "origin": origin}

def makeComputePassDescriptor(*, label: str):
    return {"label": label}

def makeRenderPassDescriptor(*, label: str, colorAttachments: 'GPURenderPassColorAttachmentDescriptor-list', depthStencilAttachment: 'GPURenderPassDepthStencilAttachmentDescriptor'):
    return {"label": label, "colorAttachments": colorAttachments, "depthStencilAttachment": depthStencilAttachment}

def makeRenderPassColorAttachmentDescriptor(*, attachment: 'GPUTextureView', resolveTarget: 'GPUTextureView', loadValue: 'GPULoadOp-or-GPUColor', storeOp: 'GPUStoreOp'="store"):
    return {"attachment": attachment, "resolveTarget": resolveTarget, "loadValue": loadValue, "storeOp": storeOp}

def makeRenderPassDepthStencilAttachmentDescriptor(*, attachment: 'GPUTextureView', depthLoadValue: 'GPULoadOp-or-float', depthStoreOp: 'GPUStoreOp', stencilLoadValue: 'GPULoadOp-or-int', stencilStoreOp: 'GPUStoreOp'):
    return {"attachment": attachment, "depthLoadValue": depthLoadValue, "depthStoreOp": depthStoreOp, "stencilLoadValue": stencilLoadValue, "stencilStoreOp": stencilStoreOp}

def makeRenderBundleDescriptor(*, label: str):
    return {"label": label}

def makeRenderBundleEncoderDescriptor(*, label: str, colorFormats: 'GPUTextureFormat-list', depthStencilFormat: 'GPUTextureFormat', sampleCount: int=1):
    return {"label": label, "colorFormats": colorFormats, "depthStencilFormat": depthStencilFormat, "sampleCount": sampleCount}

def makeFenceDescriptor(*, label: str, initialValue: int=0):
    return {"label": label, "initialValue": initialValue}

def makeSwapChainDescriptor(*, label: str, device: 'GPUDevice', format: 'GPUTextureFormat', usage: 'GPUTextureUsageFlags'=0x10):
    return {"label": label, "device": device, "format": format, "usage": usage}

def makeUncapturedErrorEventInit(*, error: 'GPUError'):
    return {"error": error}


# %% Enum map (142)

enummap = {
    'AddressMode.clamp-to-edge': 0,
    'AddressMode.repeat': 1,
    'AddressMode.mirror-repeat': 2,
    'BindingType.uniform-buffer': 0,
    'BindingType.storage-buffer': 1,
    'BindingType.readonly-storage-buffer': 2,
    'BindingType.sampler': 3,
    'BindingType.sampled-texture': 4,
    'BindingType.storage-texture': 5,
    'BlendFactor.zero': 0,
    'BlendFactor.one': 1,
    'BlendFactor.src-color': 2,
    'BlendFactor.one-minus-src-color': 3,
    'BlendFactor.src-alpha': 4,
    'BlendFactor.one-minus-src-alpha': 5,
    'BlendFactor.dst-color': 6,
    'BlendFactor.one-minus-dst-color': 7,
    'BlendFactor.dst-alpha': 8,
    'BlendFactor.one-minus-dst-alpha': 9,
    'BlendFactor.src-alpha-saturated': 10,
    'BlendFactor.blend-color': 11,
    'BlendFactor.one-minus-blend-color': 12,
    'BlendOperation.add': 0,
    'BlendOperation.subtract': 1,
    'BlendOperation.reverse-subtract': 2,
    'BlendOperation.min': 3,
    'BlendOperation.max': 4,
    'CompareFunction.never': 0,
    'CompareFunction.less': 1,
    'CompareFunction.equal': 2,
    'CompareFunction.less-equal': 3,
    'CompareFunction.greater': 4,
    'CompareFunction.not-equal': 5,
    'CompareFunction.greater-equal': 6,
    'CompareFunction.always': 7,
    'CullMode.none': 0,
    'CullMode.front': 1,
    'CullMode.back': 2,
    'FilterMode.nearest': 0,
    'FilterMode.linear': 1,
    'FrontFace.ccw': 0,
    'FrontFace.cw': 1,
    'IndexFormat.uint16': 0,
    'IndexFormat.uint32': 1,
    'InputStepMode.vertex': 0,
    'InputStepMode.instance': 1,
    'LoadOp.load': 1,
    'PowerPreference.low-power': 1,
    'PowerPreference.high-performance': 2,
    'PrimitiveTopology.point-list': 0,
    'PrimitiveTopology.line-list': 1,
    'PrimitiveTopology.line-strip': 2,
    'PrimitiveTopology.triangle-list': 3,
    'PrimitiveTopology.triangle-strip': 4,
    'StencilOperation.keep': 0,
    'StencilOperation.zero': 1,
    'StencilOperation.replace': 2,
    'StencilOperation.invert': 3,
    'StencilOperation.increment-clamp': 4,
    'StencilOperation.decrement-clamp': 5,
    'StencilOperation.increment-wrap': 6,
    'StencilOperation.decrement-wrap': 7,
    'StoreOp.store': 1,
    'StoreOp.clear': 0,
    'TextureAspect.all': 0,
    'TextureAspect.stencil-only': 1,
    'TextureAspect.depth-only': 2,
    'TextureDimension.1d': 0,
    'TextureDimension.2d': 1,
    'TextureDimension.3d': 2,
    'TextureFormat.r8unorm': 0,
    'TextureFormat.r8snorm': 1,
    'TextureFormat.r8uint': 2,
    'TextureFormat.r8sint': 3,
    'TextureFormat.r16uint': 6,
    'TextureFormat.r16sint': 7,
    'TextureFormat.r16float': 8,
    'TextureFormat.rg8unorm': 9,
    'TextureFormat.rg8snorm': 10,
    'TextureFormat.rg8uint': 11,
    'TextureFormat.rg8sint': 12,
    'TextureFormat.r32uint': 13,
    'TextureFormat.r32sint': 14,
    'TextureFormat.r32float': 15,
    'TextureFormat.rg16uint': 18,
    'TextureFormat.rg16sint': 19,
    'TextureFormat.rg16float': 20,
    'TextureFormat.rgba8unorm': 21,
    'TextureFormat.rgba8unorm-srgb': 22,
    'TextureFormat.rgba8snorm': 23,
    'TextureFormat.rgba8uint': 24,
    'TextureFormat.rgba8sint': 25,
    'TextureFormat.bgra8unorm': 26,
    'TextureFormat.bgra8unorm-srgb': 27,
    'TextureFormat.rg32uint': 30,
    'TextureFormat.rg32sint': 31,
    'TextureFormat.rg32float': 32,
    'TextureFormat.rgba16uint': 35,
    'TextureFormat.rgba16sint': 36,
    'TextureFormat.rgba16float': 37,
    'TextureFormat.rgba32uint': 38,
    'TextureFormat.rgba32sint': 39,
    'TextureFormat.rgba32float': 40,
    'TextureFormat.depth32float': 41,
    'TextureFormat.depth24plus': 42,
    'TextureFormat.depth24plus-stencil8': 43,
    'TextureViewDimension.1d': 0,
    'TextureViewDimension.2d': 1,
    'TextureViewDimension.2d-array': 2,
    'TextureViewDimension.cube': 3,
    'TextureViewDimension.cube-array': 4,
    'TextureViewDimension.3d': 5,
    'VertexFormat.uchar2': 1,
    'VertexFormat.uchar4': 3,
    'VertexFormat.char2': 5,
    'VertexFormat.char4': 7,
    'VertexFormat.uchar2norm': 9,
    'VertexFormat.uchar4norm': 11,
    'VertexFormat.char2norm': 14,
    'VertexFormat.char4norm': 16,
    'VertexFormat.ushort2': 18,
    'VertexFormat.ushort4': 20,
    'VertexFormat.short2': 22,
    'VertexFormat.short4': 24,
    'VertexFormat.ushort2norm': 26,
    'VertexFormat.ushort4norm': 28,
    'VertexFormat.short2norm': 30,
    'VertexFormat.short4norm': 32,
    'VertexFormat.half2': 34,
    'VertexFormat.half4': 36,
    'VertexFormat.float': 37,
    'VertexFormat.float2': 38,
    'VertexFormat.float3': 39,
    'VertexFormat.float4': 40,
    'VertexFormat.uint': 41,
    'VertexFormat.uint2': 42,
    'VertexFormat.uint3': 43,
    'VertexFormat.uint4': 44,
    'VertexFormat.int': 45,
    'VertexFormat.int2': 46,
    'VertexFormat.int3': 47,
    'VertexFormat.int4': 48,
}

cstructfield2enum = {
    'RenderPassColorAttachmentDescriptor.load_op': 'LoadOp',
    'RenderPassColorAttachmentDescriptor.store_op': 'StoreOp',
    'RenderPassDepthStencilAttachmentDescriptor_TextureViewId.depth_load_op': 'LoadOp',
    'RenderPassDepthStencilAttachmentDescriptor_TextureViewId.depth_store_op': 'StoreOp',
    'RenderPassDepthStencilAttachmentDescriptor_TextureViewId.stencil_load_op': 'LoadOp',
    'RenderPassDepthStencilAttachmentDescriptor_TextureViewId.stencil_store_op': 'StoreOp',
    'BindGroupLayoutBinding.ty': 'BindingType',
    'BindGroupLayoutBinding.texture_dimension': 'TextureViewDimension',
    'RasterizationStateDescriptor.front_face': 'FrontFace',
    'RasterizationStateDescriptor.cull_mode': 'CullMode',
    'BlendDescriptor.src_factor': 'BlendFactor',
    'BlendDescriptor.dst_factor': 'BlendFactor',
    'BlendDescriptor.operation': 'BlendOperation',
    'ColorStateDescriptor.format': 'TextureFormat',
    'StencilStateFaceDescriptor.compare': 'CompareFunction',
    'StencilStateFaceDescriptor.fail_op': 'StencilOperation',
    'StencilStateFaceDescriptor.depth_fail_op': 'StencilOperation',
    'StencilStateFaceDescriptor.pass_op': 'StencilOperation',
    'DepthStencilStateDescriptor.format': 'TextureFormat',
    'DepthStencilStateDescriptor.depth_compare': 'CompareFunction',
    'VertexAttributeDescriptor.format': 'VertexFormat',
    'VertexBufferDescriptor.step_mode': 'InputStepMode',
    'VertexInputDescriptor.index_format': 'IndexFormat',
    'RenderPipelineDescriptor.primitive_topology': 'PrimitiveTopology',
    'SamplerDescriptor.address_mode_u': 'AddressMode',
    'SamplerDescriptor.address_mode_v': 'AddressMode',
    'SamplerDescriptor.address_mode_w': 'AddressMode',
    'SamplerDescriptor.mag_filter': 'FilterMode',
    'SamplerDescriptor.min_filter': 'FilterMode',
    'SamplerDescriptor.mipmap_filter': 'FilterMode',
    'SamplerDescriptor.compare_function': 'CompareFunction',
    'SwapChainDescriptor.format': 'TextureFormat',
    'TextureDescriptor.dimension': 'TextureDimension',
    'TextureDescriptor.format': 'TextureFormat',
    'RequestAdapterOptions.power_preference': 'PowerPreference',
    'TextureViewDescriptor.format': 'TextureFormat',
    'TextureViewDescriptor.dimension': 'TextureViewDimension',
    'TextureViewDescriptor.aspect': 'TextureAspect',
}
